{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AccessTokenResponse": {
				"properties": {
					"access_token": {
						"type": "string"
					},
					"exp": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"access_token",
					"exp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AlertType": {
				"properties": {
					"xdr_event": {
						"properties": {
							"xdr_killchain_version": {
								"type": "string"
							},
							"xdr_killchain_stage": {
								"type": "string"
							},
							"technique": {
								"properties": {
									"name": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								},
								"type": "object"
							},
							"tags": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"tactic": {
								"properties": {
									"name": {
										"type": "string"
									},
									"id": {
										"type": "string"
									}
								},
								"type": "object"
							},
							"scope": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"framework_version": {
								"type": "string"
							},
							"display_name": {
								"type": "string"
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					},
					"key_fields": {
						"items": {
							"properties": {
								"name": {
									"type": "string"
								},
								"description": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AlertTypeResponse": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/AlertType"
				}
			},
			"ResetUserResponse": {},
			"ResetUserRequest": {
				"properties": {
					"email": {
						"type": "string"
					},
					"lang": {
						"type": "string",
						"enum": [
							"en",
							"ja"
						],
						"default": "en"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CaseHealthStatus": {
				"enum": [
					"working",
					"not working"
				],
				"type": "string"
			},
			"CaseHealth": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/CaseHealthStatus"
					},
					"error": {
						"type": "string"
					},
					"version": {
						"type": "string"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InSyncStatus.Synced": {
				"enum": [
					"Synced"
				],
				"type": "string"
			},
			"InSyncStatus.Paused": {
				"enum": [
					"Paused"
				],
				"type": "string"
			},
			"InSyncStatus.Error": {
				"enum": [
					"Error"
				],
				"type": "string"
			},
			"InSyncStatus.Removed": {
				"enum": [
					"Removed"
				],
				"type": "string"
			},
			"InSyncStatusType": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/InSyncStatus.Synced"
					},
					{
						"$ref": "#/components/schemas/InSyncStatus.Paused"
					},
					{
						"$ref": "#/components/schemas/InSyncStatus.Error"
					},
					{
						"$ref": "#/components/schemas/InSyncStatus.Removed"
					}
				]
			},
			"InSyncLink": {
				"properties": {
					"insync_id": {
						"type": "string"
					},
					"insync_name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/InSyncStatusType"
					},
					"last_synced_out_time": {
						"type": "number",
						"format": "double"
					},
					"last_synced_in_time": {
						"type": "number",
						"format": "double"
					},
					"error_message": {
						"type": "string"
					},
					"source_id": {
						"type": "string"
					},
					"source_link": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"ServiceNow"
						],
						"nullable": false
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CaseStatus": {
				"type": "string",
				"enum": [
					"New",
					"In Progress",
					"Resolved",
					"Cancelled",
					"Escalated"
				]
			},
			"CaseSeverity": {
				"type": "string",
				"enum": [
					"Low",
					"Medium",
					"High",
					"Critical"
				]
			},
			"Case": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"acknowledged": {
						"type": "number",
						"format": "double"
					},
					"assignee": {
						"type": "string"
					},
					"closed": {
						"type": "number",
						"format": "double"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"created_by": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"insyncs": {
						"items": {
							"$ref": "#/components/schemas/InSyncLink"
						},
						"type": "array"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					},
					"modified_by": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"status": {
						"$ref": "#/components/schemas/CaseStatus"
					},
					"resolution": {
						"type": "string"
					},
					"severity": {
						"$ref": "#/components/schemas/CaseSeverity"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"ticket_id": {
						"type": "number",
						"format": "double"
					},
					"version": {
						"type": "number",
						"format": "double"
					},
					"start_timestamp": {
						"type": "number",
						"format": "double"
					},
					"end_timestamp": {
						"type": "number",
						"format": "double"
					},
					"assignee_name": {
						"type": "string"
					},
					"created_by_name": {
						"type": "string"
					},
					"modified_by_name": {
						"type": "string"
					},
					"tenant_name": {
						"type": "string"
					},
					"tenant_group_name": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Partial_CaseDetails_": {
				"properties": {
					"case_id": {
						"type": "string"
					},
					"who": {
						"properties": {
							"value": {
								"type": "string"
							},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"value",
							"type"
						],
						"type": "object"
					},
					"what": {
						"properties": {
							"value": {
								"type": "string"
							},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"value",
							"type"
						],
						"type": "object"
					},
					"when": {
						"properties": {
							"value": {
								"type": "string"
							},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"value",
							"type"
						],
						"type": "object"
					},
					"where": {
						"properties": {
							"value": {
								"type": "string"
							},
							"type": {
								"type": "string"
							}
						},
						"required": [
							"value",
							"type"
						],
						"type": "object"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"CaseObservablesValue": {
				"properties": {
					"value": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CaseSummary": {
				"properties": {
					"case_id": {
						"type": "string"
					},
					"stages": {
						"properties": {
							"Exfiltration & Impact": {
								"type": "number",
								"format": "double"
							},
							"Propagation": {
								"type": "number",
								"format": "double"
							},
							"Exploration": {
								"type": "number",
								"format": "double"
							},
							"Persistent Foothold": {
								"type": "number",
								"format": "double"
							},
							"Initial Attempts": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"Exfiltration & Impact",
							"Propagation",
							"Exploration",
							"Persistent Foothold",
							"Initial Attempts"
						],
						"type": "object"
					},
					"observables": {
						"properties": {
							"service": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"process": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"registry": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"url": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"file": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"user": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"external_host": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							},
							"host": {
								"properties": {
									"values": {
										"items": {
											"$ref": "#/components/schemas/CaseObservablesValue"
										},
										"type": "array"
									},
									"count": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"values",
									"count"
								],
								"type": "object"
							}
						},
						"required": [
							"service",
							"process",
							"registry",
							"url",
							"file",
							"user",
							"external_host",
							"host"
						],
						"type": "object"
					},
					"tactics": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"techniques": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"FormattedCase": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Case"
					},
					{
						"$ref": "#/components/schemas/Partial_CaseDetails_"
					},
					{
						"properties": {
							"summary": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/CaseSummary"
									},
									{
										"type": "string"
									}
								]
							}
						},
						"type": "object"
					}
				]
			},
			"CasesResponse_FormattedCase_": {
				"properties": {
					"cases": {
						"items": {
							"$ref": "#/components/schemas/FormattedCase"
						},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"cases",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CaseAlert": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"_index": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ExternalCreateCaseResponseData": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"acknowledged": {
						"type": "number",
						"format": "double"
					},
					"assignee": {
						"type": "string",
						"description": "user_id of assignee"
					},
					"closed": {
						"type": "number",
						"format": "double"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"created_by": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"insyncs": {
						"items": {
							"$ref": "#/components/schemas/InSyncLink"
						},
						"type": "array"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					},
					"modified_by": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"status": {
						"$ref": "#/components/schemas/CaseStatus"
					},
					"resolution": {
						"type": "string"
					},
					"severity": {
						"$ref": "#/components/schemas/CaseSeverity"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"maxItems": 1000
					},
					"ticket_id": {
						"type": "number",
						"format": "double"
					},
					"version": {
						"type": "number",
						"format": "double"
					},
					"start_timestamp": {
						"type": "number",
						"format": "double"
					},
					"end_timestamp": {
						"type": "number",
						"format": "double"
					},
					"assignee_name": {
						"type": "string"
					},
					"created_by_name": {
						"type": "string"
					},
					"modified_by_name": {
						"type": "string"
					},
					"tenant_name": {
						"type": "string"
					},
					"tenant_group_name": {
						"type": "string"
					},
					"alerts": {
						"items": {
							"$ref": "#/components/schemas/CaseAlert"
						},
						"type": "array"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"alerts",
					"cust_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExternalCreateCaseRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"alerts": {
						"items": {
							"$ref": "#/components/schemas/CaseAlert"
						},
						"type": "array",
						"maxItems": 1000,
						"minItems": 1
					},
					"cust_id": {
						"type": "string"
					},
					"severity": {
						"$ref": "#/components/schemas/CaseSeverity"
					},
					"status": {
						"$ref": "#/components/schemas/CaseStatus"
					},
					"assignee": {
						"type": "string",
						"description": "user_id of assignee"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"maxItems": 1000
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"alerts",
					"cust_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExternalUpdateCaseRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"severity": {
						"$ref": "#/components/schemas/CaseSeverity"
					},
					"status": {
						"$ref": "#/components/schemas/CaseStatus"
					},
					"assignee": {
						"type": "string",
						"description": "user_id of assignee"
					},
					"tags": {
						"properties": {
							"delete": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"maxItems": 1000
							},
							"add": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"maxItems": 1000
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"InSyncActions.Synced": {
				"enum": [
					"Synced"
				],
				"type": "string"
			},
			"InSyncActions.Paused": {
				"enum": [
					"Paused"
				],
				"type": "string"
			},
			"InSyncActions.Error": {
				"enum": [
					"Error"
				],
				"type": "string"
			},
			"InSyncActivityAction": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/InSyncActions.Synced"
					},
					{
						"$ref": "#/components/schemas/InSyncActions.Paused"
					},
					{
						"$ref": "#/components/schemas/InSyncActions.Error"
					}
				]
			},
			"CaseActivityAction": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/InSyncActivityAction"
					},
					{
						"type": "string",
						"enum": [
							"add",
							"update",
							"delete"
						]
					}
				]
			},
			"CaseActivityField": {
				"type": "string",
				"enum": [
					"alerts",
					"assignee",
					"comment",
					"evidence",
					"name",
					"response",
					"severity",
					"share",
					"status",
					"tags"
				]
			},
			"CaseActivity": {
				"properties": {
					"case_id": {
						"type": "string"
					},
					"action": {
						"$ref": "#/components/schemas/CaseActivityAction"
					},
					"field": {
						"$ref": "#/components/schemas/CaseActivityField"
					},
					"from": {},
					"to": {},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"user": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"insync_name": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CaseScoreActivity": {
				"properties": {
					"reasons": {
						"items": {
							"properties": {
								"alerts": {
									"items": {
										"properties": {
											"index": {
												"type": "string"
											},
											"id": {
												"type": "string"
											}
										},
										"required": [
											"index",
											"id"
										],
										"type": "object"
									},
									"type": "array"
								},
								"reason": {
									"type": "string"
								}
							},
							"required": [
								"alerts",
								"reason"
							],
							"type": "object"
						},
						"type": "array"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"version": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"File": {
				"properties": {
					"file_name": {
						"type": "string"
					}
				},
				"required": [
					"file_name"
				],
				"type": "object"
			},
			"Process": {
				"properties": {
					"process_name": {
						"type": "string"
					}
				},
				"required": [
					"process_name"
				],
				"type": "object"
			},
			"Host": {
				"properties": {
					"hostname": {
						"type": "string"
					},
					"ip": {
						"type": "string"
					}
				},
				"required": [
					"hostname",
					"ip"
				],
				"type": "object"
			},
			"UserInfo": {
				"properties": {
					"username": {
						"type": "string"
					}
				},
				"required": [
					"username"
				],
				"type": "object"
			},
			"Registry": {
				"properties": {
					"key": {
						"type": "string"
					}
				},
				"required": [
					"key"
				],
				"type": "object"
			},
			"Sensor": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"Service": {
				"properties": {
					"service_name": {
						"type": "string"
					}
				},
				"required": [
					"service_name"
				],
				"type": "object"
			},
			"Url": {
				"properties": {
					"url": {
						"type": "string"
					}
				},
				"required": [
					"url"
				],
				"type": "object"
			},
			"IObservableData": {
				"properties": {
					"observables": {
						"properties": {
							"url": {
								"items": {
									"$ref": "#/components/schemas/Url"
								},
								"type": "array"
							},
							"external_host": {
								"items": {
									"$ref": "#/components/schemas/Host"
								},
								"type": "array"
							},
							"service": {
								"items": {
									"$ref": "#/components/schemas/Service"
								},
								"type": "array"
							},
							"sensor": {
								"items": {
									"$ref": "#/components/schemas/Sensor"
								},
								"type": "array"
							},
							"registry": {
								"items": {
									"$ref": "#/components/schemas/Registry"
								},
								"type": "array"
							},
							"user": {
								"items": {
									"$ref": "#/components/schemas/UserInfo"
								},
								"type": "array"
							},
							"host": {
								"items": {
									"$ref": "#/components/schemas/Host"
								},
								"type": "array"
							},
							"process": {
								"items": {
									"$ref": "#/components/schemas/Process"
								},
								"type": "array"
							},
							"file": {
								"items": {
									"$ref": "#/components/schemas/File"
								},
								"type": "array"
							}
						},
						"type": "object"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"observables",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IGObservableData": {
				"$ref": "#/components/schemas/IObservableData"
			},
			"Record_string.any_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ESCaseAlerts": {
				"properties": {
					"docs": {
						"items": {
							"properties": {
								"_version": {
									"type": "number",
									"format": "double"
								},
								"_type": {
									"type": "string"
								},
								"_source": {
									"$ref": "#/components/schemas/Record_string.any_"
								},
								"_seq_no": {
									"type": "number",
									"format": "double"
								},
								"_primary_term": {
									"type": "number",
									"format": "double"
								},
								"_index": {
									"type": "string"
								},
								"_id": {
									"type": "string"
								},
								"found": {
									"type": "boolean"
								}
							},
							"required": [
								"_version",
								"_type",
								"_source",
								"_seq_no",
								"_primary_term",
								"_index",
								"_id",
								"found"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AddCaseAlertsRequest": {
				"properties": {
					"alerts": {
						"items": {
							"$ref": "#/components/schemas/CaseAlert"
						},
						"type": "array"
					}
				},
				"required": [
					"alerts"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeleteCaseAlertsRequest": {
				"properties": {
					"alerts": {
						"items": {
							"$ref": "#/components/schemas/CaseAlert"
						},
						"type": "array"
					}
				},
				"required": [
					"alerts"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CaseComment": {
				"properties": {
					"comment": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					},
					"case_id": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					},
					"user": {
						"type": "string"
					}
				},
				"required": [
					"comment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddCaseCommentRequest": {
				"properties": {
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"comment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateCaseCommentRequest": {
				"properties": {
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"comment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConnectorCheckPoint": {
				"properties": {
					"id": {
						"type": "string"
					},
					"checkpoint": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					},
					"commit_timestamp": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"checkpoint",
					"commit_timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateConnectorCheckPointRequest": {
				"properties": {
					"checkpoint": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					},
					"commit_timestamp": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"checkpoint",
					"commit_timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Category": {
				"enum": [
					"database",
					"paas",
					"saas",
					"idp",
					"scan",
					"snmp",
					"websecurity",
					"endpoint",
					"firewall",
					"remote_host",
					"email",
					"cloudsecurity",
					"security_switch",
					"sase",
					"honeypot",
					"DNS Security",
					"Password Management"
				],
				"type": "string"
			},
			"Connector": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"category": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Category"
							},
							{
								"type": "string"
							}
						],
						"description": "The category assigned to the connector when it was created. For example, Cloud Security, Firewall, and so on."
					},
					"configuration": {
						"type": "string",
						"description": "The configuration section provides different details depending on the connector's category.\nThe information reported corresponds directly to Step 2 Configuration in the Add Connector/Edit Connector workflow."
					},
					"tenantid": {
						"type": "string",
						"description": "The numerical Tenant ID for the connector. Tenant IDs are listed in System | Administration | Tenants."
					},
					"is_collect": {
						"type": "boolean",
						"description": "Indicates whether the Collect function is enabled for the connector."
					},
					"is_respond": {
						"type": "boolean",
						"description": "Indicates whether the Respond function is enabled for the connector."
					},
					"name": {
						"type": "string",
						"description": "The name assigned to the connector."
					},
					"run_on": {
						"type": "string",
						"description": "Indicates whether the connector runs on the DP (dp) or a data sensor (ds)."
					},
					"type": {
						"type": "string",
						"description": "Shows the connector type (for example, Checkpoint, MySQL, and so on)."
					},
					"version": {
						"description": "The version number for the connector."
					},
					"last_activity": {
						"description": "The last activity time of the connector."
					},
					"last_data_received": {
						"description": "The last data received time of the connector."
					},
					"status": {
						"description": "The health status of the connector."
					},
					"active": {
						"type": "boolean",
						"description": "The active status of the connector."
					},
					"filter_list": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The log filteres of the connector."
					},
					"created_at": {
						"type": "number",
						"format": "double",
						"description": "The time at which the connector was created, expressed in epoch time."
					},
					"modified_at": {
						"type": "number",
						"format": "double",
						"description": "The last time the connector was modified, expressed in epoch time."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DRProfile": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"data_srcs": {
						"items": {},
						"type": "array"
					},
					"data_sinks": {
						"items": {},
						"type": "array"
					},
					"dr_conf": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateConnectorRequest": {
				"properties": {
					"cust_id": {
						"type": "string",
						"maxLength": 50
					},
					"name": {
						"type": "string",
						"maxLength": 100
					},
					"type": {
						"type": "string",
						"maxLength": 50
					},
					"category": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Category"
							},
							{
								"type": "string"
							}
						],
						"maxLength": 50
					},
					"is_collect": {
						"type": "boolean"
					},
					"is_respond": {
						"type": "boolean"
					},
					"run_on": {
						"type": "string",
						"maxLength": 50
					},
					"conf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {},
								"type": "object"
							}
						]
					},
					"filter_list": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"maxItems": 1000
					},
					"advanced_setting": {
						"type": "boolean"
					}
				},
				"required": [
					"cust_id",
					"name",
					"type",
					"category",
					"is_collect",
					"is_respond",
					"run_on",
					"conf"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateConnectorRequest": {
				"properties": {
					"cust_id": {
						"type": "string",
						"maxLength": 50
					},
					"name": {
						"type": "string",
						"maxLength": 100
					},
					"type": {
						"type": "string",
						"maxLength": 50
					},
					"category": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Category"
							},
							{
								"type": "string"
							}
						],
						"maxLength": 50
					},
					"is_collect": {
						"type": "boolean"
					},
					"is_respond": {
						"type": "boolean"
					},
					"run_on": {
						"type": "string",
						"maxLength": 50
					},
					"conf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {},
								"type": "object"
							}
						]
					},
					"filter_list": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"maxItems": 1000
					},
					"advanced_setting": {
						"type": "boolean"
					}
				},
				"required": [
					"cust_id",
					"name",
					"type",
					"category",
					"is_collect",
					"is_respond",
					"run_on",
					"conf"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConnectorsResponse": {
				"properties": {
					"total": {
						"type": "number",
						"format": "double",
						"description": "The total number of connector entries returned for the query, followed by the type of entity returned for the query (connectors in this context).\nFor example: {\"total\":88,\"connectors\""
					},
					"connectors": {
						"items": {
							"$ref": "#/components/schemas/Connector"
						},
						"type": "array"
					}
				},
				"required": [
					"total",
					"connectors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomLogParser": {
				"properties": {
					"conf_file": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"parser_file": {
						"type": "string"
					},
					"parser_name": {
						"type": "string"
					},
					"ts_upload": {
						"type": "string"
					},
					"version": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CustomLogParserCreateResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/CustomLogParser"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomLogParserUpdateResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/CustomLogParser"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomLogParserForListResult": {
				"properties": {
					"conf_file": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"parser_file": {
						"type": "string"
					},
					"parser_name": {
						"type": "string"
					},
					"ts_upload": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					},
					"is_security_sensor": {
						"type": "boolean"
					},
					"tunnel_info": {},
					"last_upgrade_status": {},
					"cert_id": {},
					"cert_name": {},
					"in_use_dev": {}
				},
				"required": [
					"_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomLogParserListResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/CustomLogParserForListResult"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomSecurityEventAction": {
				"properties": {
					"action_id": {
						"type": "string"
					},
					"playbook_id": {
						"type": "string"
					}
				},
				"required": [
					"action_id",
					"playbook_id"
				],
				"type": "object"
			},
			"CustSecEventKeyFields": {
				"properties": {
					"name": {
						"type": "string",
						"pattern": "^[A-Za-z_]\\w*(?:\\.\\w+)*$"
					},
					"label": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomSecurityEvent": {
				"properties": {
					"key_fields": {
						"items": {
							"$ref": "#/components/schemas/CustSecEventKeyFields"
						},
						"type": "array"
					},
					"update_time": {
						"type": "number",
						"format": "double"
					},
					"updated_user": {
						"type": "string"
					},
					"conf": {
						"type": "string"
					},
					"create_time": {
						"type": "number",
						"format": "double"
					},
					"created_user": {
						"type": "string"
					},
					"tenant_grps": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"tenants": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"cust_id": {
						"type": "string"
					},
					"actions": {
						"items": {
							"$ref": "#/components/schemas/CustomSecurityEventAction"
						},
						"type": "array"
					},
					"xdr_event": {
						"properties": {
							"description": {
								"type": "string"
							},
							"scope": {
								"type": "string"
							},
							"tactic": {
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"id",
									"name"
								],
								"type": "object"
							},
							"framework_version": {
								"type": "string"
							},
							"technique": {
								"properties": {
									"id": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"id",
									"name"
								],
								"type": "object"
							},
							"xdr_killchain_stage": {
								"type": "string"
							},
							"tags": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"xdr_killchain_version": {
								"type": "string"
							}
						},
						"required": [
							"scope",
							"tactic",
							"framework_version",
							"technique",
							"xdr_killchain_stage",
							"tags",
							"xdr_killchain_version"
						],
						"type": "object"
					},
					"type": {
						"type": "string"
					},
					"built_in": {
						"type": "boolean"
					},
					"org_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"display_name": {
						"type": "string"
					},
					"category": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": [
					"create_time",
					"created_user",
					"tenant_grps",
					"tenants",
					"cust_id",
					"actions",
					"xdr_event",
					"type",
					"built_in",
					"org_id",
					"name",
					"display_name",
					"category",
					"_id"
				],
				"type": "object"
			},
			"RefinedCustomSecurityEvent": {
				"$ref": "#/components/schemas/CustomSecurityEvent"
			},
			"CustomSecurityEventsResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/RefinedCustomSecurityEvent"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DataSensor": {
				"properties": {
					"_id": {
						"type": "string",
						"description": "The ID of the sensor."
					},
					"aggregator_list": {
						"items": {},
						"type": "array",
						"description": "Lists aggregator destinations for this sensor, if any."
					},
					"additional_config": {
						"description": "Lists the following additional sensor configuration:\n* aella_asset – Indicates whether asset detection is enabled for this sensor. Most sensors will show enabled; only sensors running legacy versions can toggle asset detection.\n* aws_mirror – Indicates whether the sensor is configured to receive traffic from an AWS mirror port. phy_nic –The index number of the physical interface UDP traffic from an AWS mirror port arrives on. port – The UDP port for traffic received from an AWS mirror port.\n* VNI – The VXLAN ID configured on AWS for mirrored traffic.\n* tls_syslog – Indicates whether the sensor is enabled to ingest TLS-encrypted logs. See Ingesting Logs Via TLS for details."
					},
					"cpu_usage": {
						"description": "The percentage CPU usage for the sensor at the time the data was pulled."
					},
					"tenantid": {
						"description": "The ID of the Tenant to which the sensor belongs, if any."
					},
					"disk_usage": {
						"description": "The percentage usage of the sensor's available disk space for the first disk on the sensor."
					},
					"service_status": {
						"type": "string",
						"description": "Lists the services running on the sensor.\nServices are listed with a 0 if they are running; all other values indicate the service is not running.\nThe services listed depend on the sensor type and can include the following:\n* logfwd_out\n* logfwd_filter\n* logfwd_in\n* maltrace_out\n* svc_status\n* aella_mon\n* aella_ctrl\n* td-agent\n* maltrace\n* aella_savdid\n* suricata\n* aella_flow\n* aella_conf\n* logfwd_ext_server\n* aella_winlog\n* aella_diagnostics\n* winlog_out"
					},
					"nat_ip_address": {
						"description": "If the sensor connects to the DP using network address translation (NAT), the NAT IP address observed by the DP is listed here."
					},
					"sensor_id": {
						"description": "The unique Sensor ID assigned to this sensor by the DP."
					},
					"feature": {
						"description": "Identifies the sensor type, as follows:\n* ds – data sensor\n* sds – security data sensor\n* wds – windows data sensor modular – modular data sensor dds – deception data sensor"
					},
					"feedback": {
						"type": "string",
						"description": "Shows the last status messages sent from the sensor to the DP, if any.\nIncludes information on upgrades, malware uploads, and Windows log file configuration.\nThe same information is visible in the Sensor Overview by enabling the Feedback column and clicking the Show Feedback button.\nHere is a sample feedback section in the API output:\n\nfeedback: {\n upgrade: {\n   status:,\n   timestamp:,\n   image\n },\n nessus-collector: {\n   msg,\n   status:\n   timestamp,\n },\n customer_malware_analyze: {\n   orig_name,\n   task,\n   status,\n   timestamp,\n   file_name,\n   engine_id,\n   msg,\n   tenant_id\n }\n}"
					},
					"hostname": {
						"description": "The sensor's hostname."
					},
					"internal_sensor_id": {
						"description": "The internal ID of the sensor."
					},
					"local_ip_address": {
						"description": "The local IP address of the sensor."
					},
					"license": {
						"description": "The type of license for this sensor."
					},
					"license_apt": {
						"description": "Indicates whether the sensor is licensed for Advanced Persistent Threat (Malware Sandbox) features.\nFor On-premises only."
					},
					"license_ids": {
						"description": "Indicates whether the sensor is licensed for IDS features.\nFor On-premises only."
					},
					"license_log": {
						"description": "Indicates whether the sensor is licensed for log forwarding."
					},
					"mem_usage": {
						"description": "Displays the current percentage memory usage at the time the data was pulled from the sensor."
					},
					"mode": {
						"description": "Indicates whether the sensor is a physical sensor (device) or an agent installed on a host server."
					},
					"module_version": {
						"description": "Indicates the module version for a modular sensor."
					},
					"need_upgrade": {
						"description": "Indicates whether the sensor is eligible to be upgraded: Set to true if the sensor version is older than the DP version; otherwise, set to false."
					},
					"os": {
						"description": "The operating system on which the sensor is running."
					},
					"platform": {
						"type": "string",
						"description": "Indicates the type of virtual environment in which the sensor is deployed, including:\n* aws\n* azure\n* kvm\n* qemu\n* vmware"
					},
					"inbytes_total": {
						"description": "The total number of bytes received by the sensor since the last time the aella_flow service restarted or the system rebooted."
					},
					"sensor_profile_name": {
						"description": "The sensor profile assigned to the sensor."
					},
					"auth_state_code": {
						"description": "Indicates whether the sensor has been authorized from the user interface."
					},
					"connection_status": {
						"description": "Indicates whether the sensor is currently connected to or disconnected from the DP."
					},
					"sw_version": {
						"description": "The version of Stellar Cyber software running on the sensor."
					},
					"timezone": {
						"description": "The time zone configured for the sensor."
					},
					"last_stats_time": {
						"description": "The timestamp at which the sensor uploaded statistics to the DP, expressed in epoch time."
					},
					"tunnel_enabled": {
						"description": "Indicates whether a reverse SSH tunnel is enabled between this sensor and the DP."
					},
					"tunnel_info": {
						"description": "reverse ssh tunnel information"
					},
					"outbytes_total": {
						"description": "The total number of bytes transmitted by the sensor since the last time the aella_flow service restarted or the system rebooted."
					},
					"packet_forwarding_interface": {
						"description": "The VXLAN interface number of the packet forwarding interface."
					},
					"cm_worker_id": {
						"description": "The numerical ID of the CM worker node to which the sensor is connected."
					},
					"cust_name": {},
					"message": {}
				},
				"required": [
					"_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DataSensorsResponse": {
				"properties": {
					"total": {
						"type": "number",
						"format": "double"
					},
					"sensors": {
						"items": {
							"$ref": "#/components/schemas/DataSensor"
						},
						"type": "array"
					}
				},
				"required": [
					"total",
					"sensors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateDRProfileRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"data_srcs": {
						"items": {},
						"type": "array"
					},
					"data_sinks": {
						"items": {},
						"type": "array"
					},
					"dr_conf": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"data_srcs",
					"data_sinks"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateDRProfileRequest": {
				"properties": {
					"data_srcs": {
						"items": {},
						"type": "array"
					},
					"data_sinks": {
						"items": {},
						"type": "array"
					},
					"dr_conf": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EntityUsageTenantListResponseExternal": {
				"properties": {
					"entity": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"tenant_name": {
						"type": "string"
					},
					"date": {},
					"sources": {
						"type": "string"
					},
					"type": {},
					"tenant_group_id": {
						"type": "string"
					},
					"tenant_group_name": {
						"type": "string"
					},
					"enriched_hostname": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EntityUsageGroupListResponse": {
				"properties": {
					"entity": {
						"type": "string"
					},
					"tenant_group_id": {
						"type": "string"
					},
					"tenant_group_name": {
						"type": "string"
					},
					"date": {},
					"sources": {
						"type": "string"
					},
					"type": {},
					"enriched_hostname": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EntityUsageEntityListResponseExternal": {
				"anyOf": [
					{
						"items": {
							"$ref": "#/components/schemas/EntityUsageTenantListResponseExternal"
						},
						"type": "array"
					},
					{
						"items": {
							"$ref": "#/components/schemas/EntityUsageGroupListResponse"
						},
						"type": "array"
					}
				]
			},
			"EntityUsageEntityListScopeType": {
				"type": "string",
				"enum": [
					"tenant",
					"tenant_group"
				]
			},
			"ExternalIncident": {
				"properties": {
					"assignee": {
						"type": "string",
						"description": "The resource assigned to this incident in the Incident Details page's Properties panel. All incidents start out as Unassigned, but can be assigned to any user currently defined in the Stellar Cyber system."
					},
					"created_at": {
						"type": "number",
						"format": "double",
						"description": "The time at which the incident was created, expressed in epoch time."
					},
					"created_by": {
						"type": "string",
						"description": "The user account that created the incident. Incidents generated by Stellar Cyber show a value of System for this field."
					},
					"cust_id": {
						"type": "string",
						"description": "The ID of the Tenant to which the incident belongs, if any."
					},
					"end_timestamp": {
						"type": "string",
						"description": "The last time at which this incident was updated."
					},
					"event_ids": {
						"items": {
							"properties": {
								"_index": {
									"type": "string"
								},
								"_id": {
									"type": "string"
								}
							},
							"additionalProperties": {},
							"type": "object"
						},
						"type": "array",
						"description": "Each alert associated with this incident is listed in this section with its ID (\"_id\") and the Stellar Cyber index in which it is found (\"_index\").\nA typical incident includes multiple Alert IDs in this section, each in a pair of curly brackets ({}).\nFor example, the incident shown below has three alerts associated with it.\nWe've inserted line breaks to make the output more readable:\n\"event_ids\": [\n {\"_id\":\"l_EeonoB1CpxKnigUbI5\",\"_index\":\"aella-ser-1624669600125-\"},\n {\"_id\":\"llhlonoB9HaCgbLO_OSN\",\"_index\":\"aella-ser-1624669600125-\"},\n {\"_id\":\"l1hlonoB9HaCgbLO_OSN\",\"_index\":\"aella-ser-1624669600125-\"}]"
					},
					"history": {
						"items": {
							"properties": {
								"removed": {
									"items": {
										"properties": {
											"_index": {
												"type": "string"
											},
											"_id": {
												"type": "string"
											}
										},
										"additionalProperties": {},
										"type": "object"
									},
									"type": "array"
								},
								"added": {
									"items": {
										"properties": {
											"_index": {
												"type": "string"
											},
											"_id": {
												"type": "string"
											}
										},
										"additionalProperties": {},
										"type": "object"
									},
									"type": "array"
								},
								"user": {
									"type": "string"
								},
								"timestamp": {
									"type": "number",
									"format": "double"
								},
								"field": {
									"type": "string"
								}
							},
							"additionalProperties": {},
							"type": "object"
						},
						"type": "array",
						"description": "Provides a history of the incident from its initial creation to any changes made to its Status, Priority, Assignee, Tags, or Description.\nThe same information is found in the History tab in the Incident Details page.\nThe history field starts with the origin story of the incident, showing when it was added and from what alerts.\nIf alerts were added to the incident later on, they are shown here, too.\nThen, each change to the incident is listed with the following data:\n field – The field that changed. Can be Status, Priority, Assignee, Tags, or Description.\n from – The starting value of the field.\n timestamp – The time at which the field changed, expressed in epoch time.\n to – The new value of the field.\n user – The internal account ID of the user that made the change.\nA typical history field will have multiple changes, each in its own pair of curly brackets ({}).\nFor example, the following entry shows the initial creation of the incident along with a change from a status of New to In Progress.\n \"history\":[{\"added\":[{\"_id\":\"cpfQOn4BfIF4VoXHIaFN\" \"_index\":\"aella-ser-1639612843833-\"}] \"field\":\"created_at\"\n \"timestamp\":1641671869719 \"user\":\"5f80e442-1555-4621-9ec3-c5bd284adee5\"} {\"field\":\"status\"\n \"from\":\"New\"\n \"timestamp\":1641671854012\n \"to\":\"In Progress\" \"user\":\"5f80e442-1555-4621-9ec3-c5bd284adee5\"}"
					},
					"incident_score": {
						"type": "number",
						"format": "double",
						"description": "The Incident Score assigned to the incident by Stellar Cyber, indicating the severity of the incident. Note that an incident's score updates in real time as alerts and entities are added to or removed from the incident."
					},
					"metadata": {
						"properties": {
							"name_auto": {
								"items": {},
								"type": "array"
							},
							"modified_at_auto": {
								"type": "number",
								"format": "double"
							},
							"entity_id": {
								"type": "string"
							},
							"description_auto": {
								"type": "string"
							},
							"automatic_version": {
								"type": "number",
								"format": "double"
							},
							"algorithm": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Provides a summary of the incident with the following fields:\n description_auto – An automatically generated description of the event, including the key alert on which it was based, hostnames, usernames, Open XDR Killchain stages, tactics, and techniques.\n modified_at_auto – The time at which the incident was originally modified by the system. name_auto – The name automatically assigned to the incident by the system.\nFor example:\n \"metadata\":{\"description_auto\":\"'Carbon Black:XDR Endpoint Indicator of Threat' involving host CORP\\\\Desktop-CB and userCORP\\jmac\\nObserved 1 XDR killchain stages: Persistent Foothold\\nObserved 1 tactics: XDR EBA\\nObserved 1 techniques: XDR Endpoint Indicator of Threat\\nInvolved 1 hosts:CORP\\\\Desktop-CB\\nInvolved 1 users: CORP\\\\jmac\"\n \"modified_at_auto\":1641671869798\n \"name_auto\":[\"Carbon Black:XDR Endpoint Indicator of Threat\" 1641663696000\n 1]}"
					},
					"modified_at": {
						"type": "number",
						"format": "double",
						"description": "The last time the incident was modified, expressed in epoch time."
					},
					"modified_by": {
						"type": "string",
						"description": "The internal ID of the account that performed the last modification of the incident."
					},
					"name": {
						"type": "string",
						"description": "The friendly name of the incident as it appears in Stellar Cyber displays."
					},
					"priority": {
						"type": "string",
						"description": "The priority of the incident. Incidents start out with a Medium priority, but can be changed in the Incident Detail view to Low, High, or Critical."
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "The number of alerts associated with the incident."
					},
					"start_timestamp": {
						"type": "string",
						"description": "The time at which the incident began."
					},
					"status": {
						"type": "string",
						"description": "The status associated with this incident. Can be either New, In Progress, Resolved, or Cancelled. You can change an incident's status in the Incident Detail view."
					},
					"tags": {
						"items": {},
						"type": "array",
						"description": "The tags assigned to this incident in the Incident Detail page's Properties Panel, if any."
					},
					"ticket_id": {
						"type": "number",
						"format": "double",
						"description": "The system-generated Case ID assigned to this incident."
					},
					"version": {
						"type": "number",
						"format": "double",
						"description": "The API version used to return data for this query."
					},
					"_id": {
						"type": "string"
					},
					"assignee_name": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IncidentsResponse_ExternalIncident_": {
				"properties": {
					"data": {
						"properties": {
							"total": {
								"type": "number",
								"format": "double"
							},
							"incidents": {
								"items": {
									"$ref": "#/components/schemas/ExternalIncident"
								},
								"type": "array"
							}
						},
						"required": [
							"total",
							"incidents"
						],
						"type": "object"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EditIncidentRequest": {
				"properties": {
					"priority": {
						"type": "string",
						"enum": [
							"Critical",
							"High",
							"Medium",
							"Low"
						]
					},
					"status": {
						"type": "string",
						"enum": [
							"New",
							"In Progress",
							"Resolved",
							"Cancelled"
						]
					},
					"assignee": {
						"type": "string"
					},
					"tags": {
						"properties": {
							"delete": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"maxItems": 1000
							},
							"add": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"maxItems": 1000
							}
						},
						"type": "object"
					},
					"resolution": {
						"type": "string"
					},
					"closed": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Ingestion": {
				"properties": {
					"port": {
						"type": "number",
						"format": "double"
					},
					"source_ip": {
						"type": "string"
					},
					"total_ingestion": {
						"type": "number",
						"format": "double"
					},
					"cust_id": {
						"type": "string"
					},
					"tenant_name": {
						"type": "string"
					},
					"entry_identifier": {
						"type": "string"
					}
				},
				"required": [
					"total_ingestion",
					"cust_id",
					"tenant_name",
					"entry_identifier"
				],
				"type": "object"
			},
			"IngestionsResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/Ingestion"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InsertSerBulkResponse": {
				"properties": {
					"took": {
						"type": "number",
						"format": "double"
					},
					"errors": {
						"type": "boolean"
					},
					"items": {
						"items": {},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"EventStatusType": {
				"enum": [
					"New",
					"In Progress",
					"Ignored",
					"Closed"
				],
				"type": "string"
			},
			"InsertSerRequest": {
				"properties": {
					"actual": {
						"type": "number",
						"format": "double"
					},
					"typical": {
						"type": "number",
						"format": "double"
					},
					"stellar": {},
					"timestamp": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number",
								"format": "double"
							}
						]
					},
					"write_time": {},
					"event_category": {
						"type": "string"
					},
					"event_name": {
						"type": "string"
					},
					"event_score": {
						"type": "number",
						"format": "double"
					},
					"event_source": {
						"type": "string"
					},
					"event_status": {
						"$ref": "#/components/schemas/EventStatusType"
					},
					"event_type": {
						"type": "string"
					},
					"severity": {
						"type": "number",
						"format": "double"
					},
					"fidelity": {
						"type": "number",
						"format": "double"
					},
					"threat_score": {
						"type": "number",
						"format": "double"
					},
					"lateral": {
						"type": "boolean"
					},
					"orig_id": {
						"type": "string"
					},
					"orig_index": {
						"type": "string"
					},
					"detected_field": {
						"type": "string"
					},
					"detected_fields": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"detected_value": {
						"type": "string"
					},
					"detected_values": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"detector_index": {
						"type": "number",
						"format": "double"
					},
					"start_bucket_time": {
						"type": "number",
						"format": "double"
					},
					"end_bucket_time": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"timestamp",
					"event_name",
					"event_source",
					"event_status"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"InsertSerBulkRequest": {
				"properties": {
					"security_events": {
						"items": {
							"$ref": "#/components/schemas/InsertSerRequest"
						},
						"type": "array",
						"minItems": 1,
						"maxItems": 2000
					}
				},
				"required": [
					"security_events"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InsertSerResponse": {
				"properties": {
					"index": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": [
					"index",
					"_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.string-Array_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"LogfwdFilter": {
				"properties": {
					"org_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"modified_by": {
						"type": "string"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					},
					"in_use": {
						"$ref": "#/components/schemas/Record_string.string-Array_"
					},
					"cust_id": {
						"type": "string"
					},
					"created_by": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"content": {
						"type": "string"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": [
					"org_id",
					"name",
					"cust_id",
					"created_by",
					"created_at",
					"content",
					"_id"
				],
				"type": "object"
			},
			"LogfwdFiltersResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/LogfwdFilter"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogfwdFilterResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/LogfwdFilter"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogfwdFilterFormData": {
				"properties": {
					"content": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"content",
					"cust_id",
					"name"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"content": "{\"dev_type\":\"test source\",\"rules\":{\"appid_name\":{\"type\":\"string\",\"op\":\"==\",\"value\":[\"123\"]}}}",
					"cust_id": "2414463fa1624e75941e8e4fffe22f18",
					"name": "jack test create"
				}
			},
			"LookupTypeString": {
				"type": "string",
				"enum": [
					"string",
					"ip",
					"date"
				]
			},
			"LookupTypeValuePairString": {
				"properties": {
					"values": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"maxItems": 2000
					},
					"type": {
						"$ref": "#/components/schemas/LookupTypeString"
					}
				},
				"required": [
					"values",
					"type"
				],
				"type": "object"
			},
			"LookupTypeNumber": {
				"type": "string",
				"enum": [
					"number"
				],
				"nullable": false
			},
			"LookupTypeValuePairNumber": {
				"properties": {
					"values": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"maxItems": 2000
					},
					"type": {
						"$ref": "#/components/schemas/LookupTypeNumber"
					}
				},
				"required": [
					"values",
					"type"
				],
				"type": "object"
			},
			"Lookup": {
				"allOf": [
					{
						"properties": {
							"name": {
								"type": "string"
							},
							"modified_by": {
								"type": "string"
							},
							"modified_at": {
								"type": "number",
								"format": "double"
							},
							"in_use": {
								"$ref": "#/components/schemas/Record_string.string-Array_"
							},
							"cust_id": {
								"type": "string"
							},
							"created_by": {
								"type": "string"
							},
							"created_at": {
								"type": "number",
								"format": "double"
							},
							"org_id": {
								"type": "string"
							},
							"_id": {
								"type": "string"
							}
						},
						"required": [
							"name",
							"in_use",
							"cust_id",
							"created_by",
							"created_at",
							"org_id",
							"_id"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"$ref": "#/components/schemas/LookupTypeValuePairString"
							},
							{
								"$ref": "#/components/schemas/LookupTypeValuePairNumber"
							}
						]
					}
				]
			},
			"LookupsResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/Lookup"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LookupResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/Lookup"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LookupFormData": {
				"allOf": [
					{
						"properties": {
							"name": {
								"type": "string"
							},
							"cust_id": {
								"type": "string"
							}
						},
						"required": [
							"name",
							"cust_id"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"$ref": "#/components/schemas/LookupTypeValuePairString"
							},
							{
								"$ref": "#/components/schemas/LookupTypeValuePairNumber"
							}
						]
					}
				],
				"example": {
					"cust_id": "all-tenants",
					"name": "lookup ip",
					"type": "ip",
					"values": [
						"192.168.2.2",
						"192.168.1.1"
					]
				}
			},
			"PhoneHome": {
				"properties": {
					"phonehome_server": {
						"type": "string"
					},
					"space_used": {
						"type": "number",
						"format": "double"
					},
					"logs_to_keep": {
						"type": "number",
						"format": "double"
					},
					"enable_log_to_dp": {
						"type": "boolean"
					},
					"enable_log_to_cloud": {
						"type": "boolean"
					}
				},
				"required": [
					"logs_to_keep",
					"enable_log_to_dp",
					"enable_log_to_cloud"
				],
				"type": "object"
			},
			"PhoneHomeResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PhoneHome"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PrivilegeProfileName": {
				"properties": {
					"profile_id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"display_name": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ReportFrequency": {
				"type": "string",
				"enum": [
					"daily",
					"weekly",
					"monthly"
				]
			},
			"ReportGeneratorErrorStepsType": {
				"type": "string",
				"enum": [
					"Start",
					"Launch Browser",
					"Setup Error Listeners",
					"Go To Login Page",
					"Set Report On Page",
					"Redirect To Report Page",
					"Generator Launch",
					"Report Navigate",
					"Report Loading",
					"Report Load Complete",
					"Report Generate",
					"Get Report Source",
					"Generator Teardown",
					"Get CSV Text",
					"Send Report To Server"
				],
				"nullable": false
			},
			"ReportConfig": {
				"properties": {
					"name": {
						"type": "string"
					},
					"page_orientation": {
						"type": "string"
					},
					"cust_id": {
						"type": "string",
						"nullable": true
					},
					"tenant": {
						"type": "string",
						"nullable": true
					},
					"object_list": {
						"type": "string"
					},
					"object_data_list": {
						"type": "string"
					},
					"object_template_name": {
						"type": "string"
					},
					"receiver_email": {
						"type": "string"
					},
					"report_frequency": {
						"$ref": "#/components/schemas/ReportFrequency"
					},
					"report_time_range": {
						"type": "string"
					},
					"month_day": {
						"type": "string",
						"nullable": true
					},
					"week_day": {
						"type": "string",
						"nullable": true
					},
					"send_time": {
						"type": "number",
						"format": "double"
					},
					"utc_offset": {
						"type": "number",
						"format": "double"
					},
					"send_csv": {
						"type": "boolean"
					},
					"table_size": {
						"type": "string"
					},
					"last_processing_time": {
						"type": "number",
						"format": "double"
					},
					"processing_status": {
						"type": "string"
					},
					"processing_stats": {
						"properties": {
							"fail_count": {
								"type": "number",
								"format": "double"
							},
							"success_count": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"fail_count",
							"success_count"
						],
						"type": "object"
					},
					"status_message": {
						"type": "string"
					},
					"asset_tag": {
						"type": "string"
					},
					"query_id": {
						"type": "string",
						"nullable": true
					},
					"lastGenerationStep": {
						"$ref": "#/components/schemas/ReportGeneratorErrorStepsType"
					},
					"stats": {},
					"_id": {
						"type": "string"
					},
					"org_id": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"created_by": {
						"type": "string"
					},
					"system": {
						"type": "boolean"
					},
					"modified_by": {
						"type": "string"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"page_orientation",
					"tenant",
					"object_list",
					"object_data_list",
					"object_template_name",
					"receiver_email",
					"report_frequency",
					"report_time_range",
					"month_day",
					"week_day",
					"send_time",
					"send_csv",
					"table_size",
					"asset_tag",
					"query_id",
					"_id",
					"org_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReportConfigsResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ReportConfig"
						},
						"type": "array"
					},
					"total": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"data",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReportConfigResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ReportConfig"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReportConfigPageOrientation": {
				"type": "string",
				"enum": [
					"l",
					"p"
				]
			},
			"ReportConfigReportTimeRange": {
				"type": "string",
				"enum": [
					"15m",
					"30m",
					"1h",
					"5h",
					"12h",
					"24h",
					"1w",
					"1M"
				]
			},
			"ReportConfigReportTableSize": {
				"type": "string",
				"enum": [
					"25",
					"50",
					"100",
					"500",
					"1000",
					"5000",
					"10000",
					"All Records"
				]
			},
			"ReportConfigReportWeekDay": {
				"type": "string",
				"enum": [
					"Monday",
					"Tuesday",
					"Wednesday",
					"Thursday",
					"Friday",
					"Saturday",
					"Sunday"
				]
			},
			"ReportConfigMonthDay": {
				"type": "string",
				"enum": [
					"First Day",
					"Middle of Month",
					"Last Day"
				]
			},
			"ReportConfigDaily": {
				"properties": {
					"report_frequency": {
						"type": "string",
						"enum": [
							"daily"
						],
						"nullable": false
					}
				},
				"required": [
					"report_frequency"
				],
				"type": "object"
			},
			"ReportConfigWeekly": {
				"properties": {
					"week_day": {
						"$ref": "#/components/schemas/ReportConfigReportWeekDay"
					},
					"report_frequency": {
						"type": "string",
						"enum": [
							"weekly"
						],
						"nullable": false
					}
				},
				"required": [
					"week_day",
					"report_frequency"
				],
				"type": "object"
			},
			"ReportConfigMonthly": {
				"properties": {
					"month_day": {
						"$ref": "#/components/schemas/ReportConfigMonthDay"
					},
					"report_frequency": {
						"type": "string",
						"enum": [
							"monthly"
						],
						"nullable": false
					}
				},
				"required": [
					"month_day",
					"report_frequency"
				],
				"type": "object"
			},
			"ReportConfigFrequency": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ReportConfigDaily"
					},
					{
						"$ref": "#/components/schemas/ReportConfigWeekly"
					},
					{
						"$ref": "#/components/schemas/ReportConfigMonthly"
					}
				]
			},
			"ReportConfigFormData": {
				"allOf": [
					{
						"properties": {
							"month_day": {
								"$ref": "#/components/schemas/ReportConfigMonthDay"
							},
							"week_day": {
								"$ref": "#/components/schemas/ReportConfigReportWeekDay"
							},
							"utc_offset": {
								"type": "number",
								"format": "double"
							},
							"cust_id": {
								"type": "string",
								"nullable": true
							},
							"table_size": {
								"$ref": "#/components/schemas/ReportConfigReportTableSize"
							},
							"send_time": {
								"type": "number",
								"format": "double"
							},
							"send_csv": {
								"type": "boolean"
							},
							"report_time_range": {
								"$ref": "#/components/schemas/ReportConfigReportTimeRange"
							},
							"report_frequency": {
								"$ref": "#/components/schemas/ReportFrequency"
							},
							"receiver_email": {
								"type": "string"
							},
							"query_id": {
								"type": "string",
								"nullable": true
							},
							"page_orientation": {
								"$ref": "#/components/schemas/ReportConfigPageOrientation"
							},
							"object_template_name": {
								"type": "string"
							},
							"object_list": {
								"type": "string",
								"enum": [
									"REPORT"
								],
								"nullable": false
							},
							"object_data_list": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"asset_tag": {
								"type": "string"
							}
						},
						"required": [
							"utc_offset",
							"table_size",
							"send_time",
							"send_csv",
							"report_time_range",
							"report_frequency",
							"receiver_email",
							"query_id",
							"page_orientation",
							"object_template_name",
							"object_list",
							"object_data_list",
							"name",
							"asset_tag"
						],
						"type": "object"
					},
					{
						"$ref": "#/components/schemas/ReportConfigFrequency"
					}
				]
			},
			"SecurityEventResponse": {
				"properties": {},
				"additionalProperties": {},
				"type": "object"
			},
			"EventTag": {
				"properties": {
					"op": {
						"type": "string",
						"enum": [
							"add",
							"delete"
						],
						"description": "Can be either add or delete, depending on the type of operation you want to perform."
					},
					"tag": {
						"type": "string",
						"description": "The actual tag to be added or deleted for the specified event."
					}
				},
				"required": [
					"op",
					"tag"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EventStatus": {
				"type": "string",
				"enum": [
					"New",
					"In Progress",
					"Ignored",
					"Closed"
				]
			},
			"SecurityEventRequest": {
				"properties": {
					"event_tags": {
						"items": {
							"$ref": "#/components/schemas/EventTag"
						},
						"type": "array",
						"description": "Must be included to indicate that you are adding or deleting a tag for the specified event.",
						"maxItems": 1000
					},
					"status": {
						"$ref": "#/components/schemas/EventStatus",
						"description": "You can change the status to:\n * New\n * In Progress\n * Ignored\n * Closed"
					},
					"comments": {
						"type": "string",
						"description": "You can add whatever comments you want"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpdateAddTagsRequest": {
				"properties": {
					"event_tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The actual tag to be added for the specified event.",
						"maxItems": 1000,
						"minItems": 1
					}
				},
				"required": [
					"event_tags"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateDeleteTagsRequest": {
				"properties": {
					"event_tags": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The actual tag to be deleted for the specified event.",
						"maxItems": 1000
					}
				},
				"required": [
					"event_tags"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateStatusRequest": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/EventStatus",
						"description": "You can change the status to:\n * New\n * In Progress\n * Ignored\n * Closed"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateCommentsRequest": {
				"properties": {
					"comments": {
						"type": "string",
						"description": "You can add whatever comments you want"
					}
				},
				"required": [
					"comments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnifiedFilterType": {
				"type": "string",
				"enum": [
					"query",
					"log filter",
					"alert filter"
				]
			},
			"QueryGroup": {
				"properties": {
					"modifier": {
						"type": "string",
						"enum": [
							"and",
							"or",
							"not"
						]
					},
					"conditions": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/QueryGroup"
								},
								{
									"$ref": "#/components/schemas/QueryCondition"
								},
								{
									"$ref": "#/components/schemas/QueryStringCondition"
								}
							]
						},
						"type": "array"
					}
				},
				"required": [
					"modifier",
					"conditions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QueryConditionBase": {
				"properties": {
					"field": {
						"type": "string"
					}
				},
				"required": [
					"field"
				],
				"type": "object"
			},
			"StringOperator": {
				"type": "string",
				"enum": [
					"==",
					"!=",
					"contains",
					"does not contain",
					"starts with",
					"ends with"
				]
			},
			"ExistsOperator": {
				"type": "string",
				"enum": [
					"exists",
					"does not exist"
				]
			},
			"ExistsQueryCondition": {
				"properties": {
					"op": {
						"$ref": "#/components/schemas/ExistsOperator"
					}
				},
				"required": [
					"op"
				],
				"type": "object"
			},
			"LookupOperator": {
				"type": "string",
				"enum": [
					"is in lookup",
					"is not in lookup"
				]
			},
			"LookupQueryCondition": {
				"properties": {
					"value": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"minItems": 1,
						"maxItems": 1
					},
					"op": {
						"$ref": "#/components/schemas/LookupOperator"
					}
				},
				"required": [
					"value",
					"op"
				],
				"type": "object"
			},
			"StringQueryCondition": {
				"allOf": [
					{
						"$ref": "#/components/schemas/QueryConditionBase"
					},
					{
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"string"
								],
								"nullable": false
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"properties": {
									"caseSensitive": {
										"type": "boolean"
									},
									"value": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"op": {
										"$ref": "#/components/schemas/StringOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"properties": {
									"value": {
										"items": {
											"type": "string"
										},
										"type": "array",
										"minItems": 1,
										"maxItems": 1
									},
									"op": {
										"type": "string",
										"enum": [
											"matches",
											"does not match"
										]
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"$ref": "#/components/schemas/ExistsQueryCondition"
							},
							{
								"$ref": "#/components/schemas/LookupQueryCondition"
							}
						]
					}
				]
			},
			"SingleNumberOperator": {
				"type": "string",
				"enum": [
					">",
					"<",
					">=",
					"<="
				]
			},
			"MultiNumberOperator": {
				"type": "string",
				"enum": [
					"==",
					"!="
				]
			},
			"NumberQueryCondition": {
				"allOf": [
					{
						"$ref": "#/components/schemas/QueryConditionBase"
					},
					{
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"number"
								],
								"nullable": false
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array",
										"minItems": 1,
										"maxItems": 1
									},
									"op": {
										"$ref": "#/components/schemas/SingleNumberOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									},
									"op": {
										"$ref": "#/components/schemas/MultiNumberOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array",
										"minItems": 2,
										"maxItems": 2
									},
									"op": {
										"type": "string",
										"enum": [
											"in range"
										],
										"nullable": false
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"$ref": "#/components/schemas/ExistsQueryCondition"
							},
							{
								"$ref": "#/components/schemas/LookupQueryCondition"
							}
						]
					}
				]
			},
			"DateQueryCondition": {
				"allOf": [
					{
						"$ref": "#/components/schemas/QueryConditionBase"
					},
					{
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"date"
								],
								"nullable": false
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array",
										"minItems": 1,
										"maxItems": 1
									},
									"op": {
										"$ref": "#/components/schemas/SingleNumberOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									},
									"op": {
										"$ref": "#/components/schemas/MultiNumberOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"properties": {
									"value": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array",
										"minItems": 2,
										"maxItems": 2
									},
									"op": {
										"type": "string",
										"enum": [
											"in range"
										],
										"nullable": false
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"$ref": "#/components/schemas/ExistsQueryCondition"
							},
							{
								"$ref": "#/components/schemas/LookupQueryCondition"
							}
						]
					}
				]
			},
			"IpOperator": {
				"type": "string",
				"enum": [
					"matches",
					"does not match"
				]
			},
			"IpQueryCondition": {
				"allOf": [
					{
						"$ref": "#/components/schemas/QueryConditionBase"
					},
					{
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"ip"
								],
								"nullable": false
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"properties": {
									"value": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"op": {
										"$ref": "#/components/schemas/IpOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"$ref": "#/components/schemas/ExistsQueryCondition"
							},
							{
								"$ref": "#/components/schemas/LookupQueryCondition"
							}
						]
					}
				]
			},
			"BooleanOperator": {
				"type": "string",
				"enum": [
					"==",
					"!="
				]
			},
			"BooleanQueryCondition": {
				"allOf": [
					{
						"$ref": "#/components/schemas/QueryConditionBase"
					},
					{
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"boolean"
								],
								"nullable": false
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					},
					{
						"anyOf": [
							{
								"properties": {
									"value": {
										"items": {
											"type": "boolean"
										},
										"type": "array",
										"minItems": 1,
										"maxItems": 1
									},
									"op": {
										"$ref": "#/components/schemas/BooleanOperator"
									}
								},
								"required": [
									"value",
									"op"
								],
								"type": "object"
							},
							{
								"$ref": "#/components/schemas/ExistsQueryCondition"
							}
						]
					}
				]
			},
			"QueryCondition": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/StringQueryCondition"
					},
					{
						"$ref": "#/components/schemas/NumberQueryCondition"
					},
					{
						"$ref": "#/components/schemas/DateQueryCondition"
					},
					{
						"$ref": "#/components/schemas/IpQueryCondition"
					},
					{
						"$ref": "#/components/schemas/BooleanQueryCondition"
					}
				]
			},
			"QueryStringCondition": {
				"properties": {
					"value": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"minItems": 1,
						"maxItems": 1
					},
					"type": {
						"type": "string",
						"enum": [
							"query_string"
						],
						"nullable": false
					}
				},
				"required": [
					"value",
					"type"
				],
				"type": "object"
			},
			"RootQueryGroup": {
				"properties": {
					"modifier": {
						"type": "string",
						"enum": [
							"or"
						],
						"nullable": false
					},
					"conditions": {
						"items": {
							"$ref": "#/components/schemas/QueryGroup"
						},
						"type": "array"
					}
				},
				"required": [
					"modifier",
					"conditions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnifiedFilterMetadata": {
				"properties": {
					"lookups": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"time_range": {
						"properties": {
							"period": {
								"type": "string"
							},
							"type": {
								"type": "string",
								"enum": [
									"relative"
								],
								"nullable": false
							}
						},
						"required": [
							"period",
							"type"
						],
						"type": "object"
					},
					"data_source": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AlertFilter": {
				"properties": {
					"name": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"org_id": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"alert filter"
						],
						"nullable": false
					},
					"conditions": {
						"$ref": "#/components/schemas/RootQueryGroup"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"created_by": {
						"type": "string"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					},
					"modified_by": {
						"type": "string"
					},
					"metadata": {
						"$ref": "#/components/schemas/UnifiedFilterMetadata"
					},
					"_id": {
						"type": "string"
					},
					"data": {
						"properties": {
							"filtered_count": {
								"properties": {},
								"additionalProperties": {
									"type": "number",
									"format": "double"
								},
								"type": "object"
							},
							"disabled": {
								"type": "boolean"
							},
							"notes_by": {
								"type": "string"
							},
							"notes": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"tenants": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"default": []
					},
					"tenant_grps": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"default": []
					}
				},
				"required": [
					"_id",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SecurityEventFiltersResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/AlertFilter"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SecurityEventFilterResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/AlertFilter"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SecurityEventFilterFormData": {
				"properties": {
					"name": {
						"type": "string",
						"pattern": "^[A-Za-z0-9\\s_.():\\-&]+$",
						"maxLength": 100
					},
					"cust_id": {
						"type": "string"
					},
					"conditions": {
						"$ref": "#/components/schemas/RootQueryGroup"
					},
					"data": {
						"properties": {
							"disabled": {
								"type": "boolean"
							},
							"notes": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"metadata": {
						"properties": {
							"data_source": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"time_range": {
								"properties": {
									"period": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"enum": [
											"daily",
											"relative",
											"absolute"
										]
									}
								},
								"required": [
									"period",
									"type"
								],
								"type": "object"
							},
							"lookups": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"name",
					"cust_id",
					"conditions"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"name": "test-filter",
					"cust_id": "all-tenants",
					"conditions": {
						"modifier": "or",
						"conditions": [
							{
								"modifier": "and",
								"conditions": [
									{
										"field": "action",
										"type": "string",
										"op": "==",
										"value": [
											"action_1"
										],
										"caseSensitive": false
									}
								]
							}
						]
					},
					"data": {
						"disabled": false,
						"notes": "test-note"
					},
					"metadata": {
						"lookups": []
					}
				}
			},
			"SensorImageEntry": {
				"properties": {
					"display_value": {
						"type": "string"
					},
					"item_list": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"package": {
						"type": "string"
					},
					"sha1": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"version": {
						"type": "string"
					},
					"download_path": {
						"type": "string"
					}
				},
				"required": [
					"display_value",
					"name",
					"package",
					"sha1",
					"size",
					"version",
					"download_path"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SensorImagesInfo": {
				"properties": {
					"datasensor": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/SensorImageEntry"
						},
						"type": "object"
					}
				},
				"required": [
					"datasensor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SensorImagesInfoResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/SensorImagesInfo"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StorageUsage": {
				"properties": {
					"percentage": {
						"type": "number",
						"format": "double"
					},
					"usage": {
						"type": "number",
						"format": "double"
					},
					"index": {
						"type": "string"
					},
					"tenant_name": {
						"type": "string"
					}
				},
				"required": [
					"percentage",
					"usage",
					"tenant_name"
				],
				"type": "object"
			},
			"StorageUsageByTime": {
				"properties": {
					"usages": {
						"items": {
							"$ref": "#/components/schemas/StorageUsage"
						},
						"type": "array"
					},
					"total_usage": {
						"type": "number",
						"format": "double"
					},
					"time": {
						"type": "string"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"usages",
					"total_usage",
					"time",
					"timestamp"
				],
				"type": "object"
			},
			"StorageUsagesResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/StorageUsageByTime"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StorageUsageAggregationQuery": {
				"type": "string",
				"enum": [
					"tenant",
					"tenant_index"
				]
			},
			"TenantPurgeCheckResponse": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"AUTH_SSO_SAML": {
				"type": "string",
				"enum": [
					"sso_saml"
				],
				"nullable": false
			},
			"AUTH_SYS_DEFAULT": {
				"type": "string",
				"enum": [
					"system_default"
				],
				"nullable": false
			},
			"AUTH_LOCAL": {
				"type": "string",
				"enum": [
					"local"
				],
				"nullable": false
			},
			"AuthenticationMethodType": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/AUTH_SSO_SAML"
					},
					{
						"$ref": "#/components/schemas/AUTH_SYS_DEFAULT"
					},
					{
						"$ref": "#/components/schemas/AUTH_LOCAL"
					}
				]
			},
			"Tenant": {
				"properties": {
					"org_id": {
						"type": "string"
					},
					"cust_name": {
						"type": "string"
					},
					"cust_id": {
						"type": "string"
					},
					"ds_num": {
						"type": "number",
						"format": "double"
					},
					"user_num": {
						"type": "number",
						"format": "double"
					},
					"tgrp_name": {
						"type": "string"
					},
					"contact": {
						"type": "string"
					},
					"contact_email": {
						"type": "string"
					},
					"contact_phone": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"daily_limit": {
						"type": "number",
						"format": "double"
					},
					"info": {},
					"retention_group": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"authentication_method": {
						"$ref": "#/components/schemas/AuthenticationMethodType"
					},
					"sso_config": {},
					"ingestion_limit": {
						"type": "number",
						"format": "double"
					},
					"tenant_session_override": {
						"type": "boolean"
					},
					"session_timeout": {
						"type": "number",
						"format": "double"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TenantRequest": {
				"properties": {
					"cust_name": {
						"type": "string",
						"description": "Max length is 150<br/>\n /^[\\p{L}\\p{N}_ \\-.,]+$/u<br/>\nCannot use \"Root Tenant\" and \"All Tenants\""
					},
					"contact": {
						"type": "string",
						"nullable": true,
						"description": "Max length is 50"
					},
					"contact_email": {
						"type": "string",
						"nullable": true,
						"pattern": "^$|^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
						"maxLength": 100
					},
					"contact_phone": {
						"type": "string",
						"nullable": true,
						"description": "Max length is 50"
					},
					"address": {
						"type": "string",
						"nullable": true,
						"description": "Max length is 200"
					},
					"info": {
						"type": "string",
						"nullable": true
					},
					"retention_group": {
						"type": "string",
						"nullable": true,
						"description": "Max length is 50<br>\nName of existing retention group. On-premises only."
					},
					"mfa_enabled": {
						"type": "boolean",
						"nullable": true,
						"description": "To set it true, system's 2 factor authentication must be 'optional'."
					},
					"authentication_method": {
						"allOf": [
							{
								"$ref": "#/components/schemas/AuthenticationMethodType"
							}
						],
						"nullable": true
					},
					"sso_config": {
						"properties": {
							"allow_clock_skew": {
								"type": "boolean",
								"nullable": true
							},
							"idp_certificate": {
								"type": "string",
								"nullable": true,
								"description": "This fields is required when sso_config_method equals to 'config'."
							},
							"idp_metadata": {
								"type": "string",
								"nullable": true
							},
							"idp_callback_type": {
								"type": "string",
								"nullable": true
							},
							"issuer_url": {
								"type": "string",
								"nullable": true,
								"description": "Max length is 256."
							},
							"sso_config_method": {
								"type": "string",
								"enum": [
									"metadata",
									"config"
								],
								"nullable": true
							},
							"sso_entry_point": {
								"type": "string",
								"nullable": true,
								"description": "This fields is required when sso_config_method equals to 'config'.\nMax length is 256."
							}
						},
						"type": "object",
						"nullable": true,
						"description": "This fields is required when authentication_method equals to 'sso_saml'."
					},
					"ingestion_limit": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"session_timeout": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"tenant_session_override": {
						"type": "boolean"
					}
				},
				"required": [
					"cust_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetTenantLogoResponse": {
				"properties": {
					"tgrp_logo": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TenantGroup": {
				"properties": {
					"org_id": {
						"type": "string"
					},
					"tgrp_id": {
						"type": "string"
					},
					"tgrp_name": {
						"type": "string"
					},
					"tenants": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"tgrp_logo": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					},
					"modified_at": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateTenantGroupRequest": {
				"properties": {
					"tgrp_name": {
						"type": "string",
						"maxLength": 50
					},
					"tenants": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"tgrp_logo": {
						"type": "string"
					}
				},
				"required": [
					"tgrp_name",
					"tenants"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTenantGroupRequest": {
				"properties": {
					"tgrp_logo": {
						"type": "string"
					},
					"tenants": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GetTenantGroupLogoResponse": {
				"properties": {
					"tgrp_logo": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpdateSerResponse": {},
			"UpdateSerRequest": {
				"properties": {
					"index": {
						"type": "string",
						"description": "The index to be queried"
					},
					"_id": {
						"type": "string",
						"description": "The ID of the event to change"
					},
					"event_tag": {
						"$ref": "#/components/schemas/EventTag",
						"description": "Must be included to indicate that you are adding or deleting a tag for the specified event."
					},
					"status": {
						"$ref": "#/components/schemas/EventStatus",
						"description": "You can change the status to:\n * New\n * In Progress\n * Ignored\n * Closed"
					},
					"event_status": {
						"$ref": "#/components/schemas/EventStatus",
						"description": "You can change the status to:\n * New\n * In Progress\n * Ignored\n * Closed"
					},
					"comments": {
						"type": "string",
						"description": "You can add whatever comments you want"
					}
				},
				"required": [
					"index",
					"_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.number_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"UserScope": {
				"type": "string",
				"enum": [
					"root",
					"partner",
					"tenant"
				]
			},
			"User": {
				"description": "User GET/POST/PUT for UI Server Response",
				"properties": {
					"cust_id": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"display_name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"description": "User's email. It will be validated at the server."
					},
					"email_notify": {
						"type": "boolean"
					},
					"language": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"name": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"priv_profile_id": {
						"type": "string"
					},
					"query": {
						"type": "string",
						"nullable": true
					},
					"user_role": {
						"$ref": "#/components/schemas/UserScope"
					},
					"tgrp_id": {
						"type": "string"
					},
					"homepage": {
						"properties": {
							"url": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							}
						},
						"required": [
							"url",
							"alias"
						],
						"type": "object",
						"nullable": true
					},
					"cdp": {
						"type": "boolean"
					},
					"duplicate": {
						"properties": {
							"name": {
								"type": "boolean"
							},
							"email": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"accept_eula": {
						"type": "boolean"
					},
					"org_id": {
						"type": "string"
					},
					"user_id": {
						"type": "string"
					},
					"passwordEditable": {
						"type": "boolean"
					},
					"priv_profile_name": {
						"type": "string"
					},
					"priv_profile_display_name": {
						"type": "string"
					},
					"login_activity": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"has_api_token": {
						"type": "boolean"
					}
				},
				"required": [
					"cust_id",
					"default",
					"display_name",
					"email",
					"email_notify",
					"name",
					"priv_profile_id",
					"user_role",
					"org_id",
					"user_id",
					"priv_profile_name",
					"priv_profile_display_name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UsersResponse": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserForCreateRequest": {
				"description": "User POST",
				"properties": {
					"cust_id": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"display_name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"description": "User's email. It will be validated at the server."
					},
					"email_notify": {
						"type": "boolean"
					},
					"language": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"name": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"priv_profile_id": {
						"type": "string"
					},
					"query": {
						"type": "string",
						"nullable": true
					},
					"user_role": {
						"$ref": "#/components/schemas/UserScope"
					},
					"tgrp_id": {
						"type": "string"
					},
					"homepage": {
						"properties": {
							"url": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							}
						},
						"required": [
							"url",
							"alias"
						],
						"type": "object",
						"nullable": true
					},
					"cdp": {
						"type": "boolean"
					},
					"duplicate": {
						"properties": {
							"name": {
								"type": "boolean"
							},
							"email": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"password": {
						"type": "string",
						"description": "User's password. It will be validated at the server."
					}
				},
				"required": [
					"cust_id",
					"default",
					"display_name",
					"email",
					"email_notify",
					"name",
					"priv_profile_id",
					"user_role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserCore.Exclude_keyofUserCore.name-or-email__": {
				"properties": {
					"query": {
						"type": "string",
						"nullable": true
					},
					"cust_id": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"display_name": {
						"type": "string"
					},
					"email_notify": {
						"type": "boolean"
					},
					"language": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"priv_profile_id": {
						"type": "string"
					},
					"user_role": {
						"$ref": "#/components/schemas/UserScope"
					},
					"tgrp_id": {
						"type": "string"
					},
					"homepage": {
						"properties": {
							"url": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							}
						},
						"required": [
							"url",
							"alias"
						],
						"type": "object",
						"nullable": true
					},
					"cdp": {
						"type": "boolean"
					},
					"duplicate": {
						"properties": {
							"name": {
								"type": "boolean"
							},
							"email": {
								"type": "boolean"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"cust_id",
					"default",
					"display_name",
					"email_notify",
					"priv_profile_id",
					"user_role"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserForUpdateRequest": {
				"description": "User PUT",
				"properties": {
					"query": {
						"type": "string",
						"nullable": true
					},
					"cust_id": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"display_name": {
						"type": "string"
					},
					"email_notify": {
						"type": "boolean"
					},
					"language": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"priv_profile_id": {
						"type": "string"
					},
					"user_role": {
						"$ref": "#/components/schemas/UserScope"
					},
					"tgrp_id": {
						"type": "string"
					},
					"homepage": {
						"properties": {
							"url": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							}
						},
						"required": [
							"url",
							"alias"
						],
						"type": "object",
						"nullable": true
					},
					"cdp": {
						"type": "boolean"
					},
					"duplicate": {
						"properties": {
							"name": {
								"type": "boolean"
							},
							"email": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"name": {
						"type": "string",
						"description": "User's name. This field is currently immutable and will be ignored if sent.<br />\nThere may be deprecation or changes possible after version 5.4.0.\""
					},
					"accept_eula": {
						"type": "boolean"
					},
					"email": {
						"type": "string",
						"description": "User's email. It will be validated at the server.\nFor SaaS, the email cannot be changed and will be ignored if provided."
					},
					"password": {
						"type": "string",
						"description": "New password. It will be validated at the server.\nold_password is required to update the password."
					},
					"old_password": {
						"type": "string",
						"description": "Old password of the user."
					}
				},
				"required": [
					"cust_id",
					"default",
					"display_name",
					"email_notify",
					"priv_profile_id",
					"user_role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserForPatchRequest": {
				"description": "User PATCH\nTODO: The later version will support null to delete fields",
				"properties": {
					"cust_id": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"display_name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"description": "User's email. It will be validated at the server.\nFor SaaS, the email cannot be changed and will be ignored if provided."
					},
					"email_notify": {
						"type": "boolean"
					},
					"language": {
						"type": "string"
					},
					"mfa_enabled": {
						"type": "boolean"
					},
					"name": {
						"type": "string",
						"description": "User's name. This field is currently immutable and will be ignored if sent.<br />\nThere may be deprecation or changes possible since after 5.4.0.\""
					},
					"phone": {
						"type": "string"
					},
					"priv_profile_id": {
						"type": "string"
					},
					"query": {
						"type": "string",
						"nullable": true
					},
					"user_role": {
						"$ref": "#/components/schemas/UserScope"
					},
					"tgrp_id": {
						"type": "string"
					},
					"homepage": {
						"properties": {
							"url": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							}
						},
						"required": [
							"url",
							"alias"
						],
						"type": "object",
						"nullable": true
					},
					"cdp": {
						"type": "boolean"
					},
					"duplicate": {
						"properties": {
							"name": {
								"type": "boolean"
							},
							"email": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"accept_eula": {
						"type": "boolean"
					},
					"password": {
						"type": "string",
						"description": "New password. It will be validated at the server.\nold_password is required to update the password."
					},
					"old_password": {
						"type": "string",
						"description": "Old password of the user."
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			},
			"basic": {
				"scheme": "basic",
				"type": "http"
			}
		}
	},
	"info": {
		"title": "Stellar Cyber API Reference",
		"version": "5.3.0",
		"description": "This topic lets you explore the different public APIs available for the Stellar Cyber Open XDR platform. Stellar Cyber performs end-to-end threat detection and response, combining multiple capabilities – NG-SIEM, NDR, TIP, IDS, SOAR, and UEBA – into a single user experience. Note: Entries in the reference with a line through them still exist in the product but are deprecated (for example, the /cases API has replaced the /incidents API, which is now deprecated).",
		"contact": {
			"name": "Stellar Cyber"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/access_token": {
			"post": {
				"operationId": "generateAccessToken",
				"responses": {
					"200": {
						"description": "The created access token response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessTokenResponse"
								}
							}
						}
					}
				},
				"description": "Generate a new access token.\nEither use refresh token with Basic Auth or JWT with Bearer Auth to authenticate the request.",
				"tags": [
					"Access Token"
				],
				"security": [
					{
						"jwt": []
					},
					{
						"basic": []
					}
				],
				"parameters": []
			}
		},
		"/alert_types": {
			"get": {
				"operationId": "getAlertTypes",
				"responses": {
					"200": {
						"description": "All alert types and their key fields.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AlertTypeResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"internal_mysql_anomaly": {
												"xdr_event": {
													"display_name": "Internal SQL Anomaly",
													"framework_version": "v8",
													"name": "internal_mysql_anomaly",
													"scope": "Internal",
													"tactic": {
														"id": "TA0008",
														"name": "Lateral Movement"
													},
													"tags": [
														"Internal",
														"Network Traffic Analysis"
													],
													"technique": {
														"id": "T1210",
														"name": "Exploitation of Remote Services"
													},
													"xdr_killchain_stage": "Propagation",
													"xdr_killchain_version": "v1"
												},
												"key_fields": [
													{
														"description": "Source host IP address",
														"name": "srcip"
													},
													{
														"description": "Source hostname",
														"name": "srcip_host"
													},
													{
														"description": "Name of the source country",
														"name": "srcip_geo.countryName"
													},
													{
														"description": "Actual number of SQL queries in the time period",
														"name": "actual"
													},
													{
														"description": "Typical number of SQL queries from the source IP address",
														"name": "typical"
													},
													{
														"description": "Destination hostname",
														"name": "dstip_host"
													}
												]
											},
											"external_malware_activity": {
												"xdr_event": {
													"display_name": "External Other Malware",
													"framework_version": "v8",
													"name": "external_malware_activity",
													"scope": "External",
													"tactic": {
														"id": "XTA0006",
														"name": "XDR Malware"
													},
													"tags": [
														"External",
														"Malware"
													],
													"technique": {
														"id": "XT6001",
														"name": "XDR Miscellaneous Malware"
													},
													"xdr_killchain_stage": "Persistent Foothold",
													"xdr_killchain_version": "v1"
												},
												"key_fields": [
													{
														"description": "Ids signature",
														"name": "ids.signature"
													},
													{
														"description": "Malicious activity",
														"name": "maltrace-cloud.data.malicious_activity"
													},
													{
														"description": "Number of records for one IDS signature or malicious activity in the period",
														"name": "actual"
													},
													{
														"description": "Boolean, indicating whether this activity is lateral (from private to private)",
														"name": "lateral"
													},
													{
														"description": "Source hostname",
														"name": "srcip_host"
													},
													{
														"description": "Source country",
														"name": "srcip_geo.countryName"
													},
													{
														"description": "Destination hostname",
														"name": "dstip_host"
													},
													{
														"description": "Destination country",
														"name": "dstip_geo.countryName"
													},
													{
														"description": "Name of the file that carries the malware",
														"name": "file_name"
													},
													{
														"description": "Source of event, either IDS or Sandbox",
														"name": "event_source"
													}
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieve all alert types and their key fields.",
				"tags": [
					"Alert Types"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/reset_user": {
			"post": {
				"operationId": "resetUser",
				"responses": {
					"200": {
						"description": "response",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ResetUserResponse"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send email to reset user password.",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetUserRequest"
							}
						}
					}
				}
			}
		},
		"/cases/health": {
			"get": {
				"operationId": "getCaseHealth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/CaseHealth"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"status": "working",
												"version": "v1"
											}
										}
									},
									"Example 2": {
										"value": {
											"data": {
												"status": "not working",
												"error": "Request failed with status code 500",
												"version": "unavailable"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get Case backend API health status.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/cases/{id}": {
			"get": {
				"operationId": "getCase",
				"responses": {
					"200": {
						"description": "case",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Case"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get a case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "updateCase",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Case"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "This argument should contain the updated case values.\nYou can update the following case properties:\n- name - max length 200\n- severity - The possible values are Critical, High, Medium, and Low.\n- status - The possible values are Escalated, New, In Progress, Resolved, and Cancelled.\n- assignee\n- tags",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalUpdateCaseRequest",
								"description": "This argument should contain the updated case values.\nYou can update the following case properties:\n- name - max length 200\n- severity - The possible values are Critical, High, Medium, and Low.\n- status - The possible values are Escalated, New, In Progress, Resolved, and Cancelled.\n- assignee\n- tags"
							}
						}
					}
				}
			}
		},
		"/cases": {
			"get": {
				"operationId": "listCases",
				"responses": {
					"200": {
						"description": "list of existing cases:",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/CasesResponse_FormattedCase_"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of existing cases.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Use either of these arguments to query for all cases assigned to a specified tenant using its ID retrieved from either the Cases page or the System | Administration | Tenants page, as described below.",
						"in": "query",
						"name": "tenantid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to query for all cases matching a specified status. You can see the statuses associated with cases in the Cases page.\nThe possible values are Escalated, New, In Progress, Resolved, and Cancelled.\nIf you do not specify a value for status, this argument will default to New, In Progress, and Escalated.",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to query for all cases matching a specified priority. You can see the priorities associated with cases in the Cases\npage. The possible values are Critical, High, Medium, and Low.",
						"in": "query",
						"name": "severity",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~severity",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "modified_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~modified_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "created_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~created_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to query for all cases with a specified tag.\nYou can see the tags assigned to a case in the top bar on the Case Detail display.\nYou can specify multiple tags in a single query by separating the tags with a comma.\nFor example:\n https://<Stellar Cyber_IP>/connect/api/v1/cases?tags=test1,test2",
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~tags",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to query for all cases assigned to a specific user (including Unassigned).\nThe easiest place to find assignees is in the Investigate | Cases page.",
						"in": "query",
						"name": "assignee",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~assignee",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use either of these arguments to query for all cases assigned to a specified tenant using its ID retrieved from either the Cases page or the System | Administration | Tenants page, as described below.",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "event_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "event_index",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to specify the minimum score associated with a system-generated case for it to be returned by a query.",
						"in": "query",
						"name": "min_score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to specify the minimum number of alerts associated with a system-generated case for it to be returned by a query.",
						"in": "query",
						"name": "min_size_auto",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to skip the specified number of matching records before returning results. This argument is most useful when used together\nwith the sort and order arguments, allowing you to, for example, query for the second 100 cases with the highest case score:\n http://<Stellar Cyber_IP>/connect/api/v1/cases?sort=score&order=desc&skip=100",
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to limit the number of results returned by your query to the specified integer value. This argument is particularly useful when\nused together with the sort and order arguments, allowing you to, for example, query for cases with the highest case score:\n http://<Stellar Cyber_IP>/connect/api/v1/cases?limit=10&sort=score&order=desc",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to sort the cases returned by your query according to the specified field. <br>\nYou can sort your results using any of the following fields:<br>\n ticket_id – Numerical sort.<br>\n name – Alphabetical sort.<br>\n score – Numerical sort.<br>\n size – Numerical sort by number of associated alerts.<br>\n status – Sort order is Escalated, New, In Progress, Resolved, and Cancelled for descending; reversed for ascending. <br>\n severity – Sort order is Critical, High, Medium, and Low for descending; reversed for ascending.<br>\n modified_at – Date sort. <br>\n created_at – Date sort.",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to specify whether the sort specified as part of your query is applied in either ascending (asc) or descending (desc) order.\nFor example, the following query returns the five cases with the most associated alerts from greatest to least.\n http://<Stellar Cyber_IP>/connect/api/v1/cases?limit=5&sort=size&order=desc",
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to include the summary for each case. This argument performs best when the limit size is low.\nPass `true` to include the summary.\nPass `false` to exclude the summary.",
						"in": "query",
						"name": "include_summary",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "Use this argument to determine how the summary, if included, should be formatted.\nPass `true` to format the summary as a string.\nPass `false` to format the summary as a JSON object.",
						"in": "query",
						"name": "format_summary",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "createCase",
				"responses": {
					"200": {
						"description": "case created",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ExternalCreateCaseResponseData"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Create a new case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ExternalCreateCaseRequest"
							}
						}
					}
				}
			}
		},
		"/cases/{id}/activities": {
			"get": {
				"operationId": "getCaseActivity",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/CaseActivity"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the activities of the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cases/{id}/scores": {
			"get": {
				"operationId": "getCaseScores",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/CaseScoreActivity"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the case score activities of the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cases/{id}/observables": {
			"get": {
				"operationId": "getCaseObservables",
				"responses": {
					"200": {
						"description": "Map of observables",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IGObservableData"
								}
							}
						}
					}
				},
				"description": "Retrieves the observables in the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cases/{id}/summary": {
			"get": {
				"operationId": "getCaseSummary",
				"responses": {
					"200": {
						"description": "Case summary",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"anyOf": [
												{
													"$ref": "#/components/schemas/CaseSummary"
												},
												{
													"type": "string"
												}
											]
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the summary for the given case.\nThe summary includes XDR Kill Chain stage, tactic, technique, and observable information.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to determine the response format.\nPass `true` to return the summary as a string.\nPass `false` to return the summary as a JSON object.",
						"in": "query",
						"name": "formatted",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/cases/{id}/alerts": {
			"get": {
				"operationId": "getCaseESAlerts",
				"responses": {
					"200": {
						"description": "List of alerts",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ESCaseAlerts"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves paginated alerts for the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to skip the specified number of records before returning results.\nFor example, the following query returns the second 10 alerts:\n http://<Stellar Cyber_IP>/connect/api/v1/cases/{id}/alerts?skip=10&limit=10",
						"in": "query",
						"name": "skip",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to limit the number of results returned by your query to the specified integer value.\nA maximum limit of 50 results can be returned at a time.\nFor example, the following query returns the first 10 alerts:\n http://<Stellar Cyber_IP>/connect/api/v1/cases/{id}/alerts?limit=10",
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "addCaseAlerts",
				"responses": {
					"200": {
						"description": "Status message",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Add alerts to the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "alerts to add. Alerts must be exist and have the same tenantid as the cust_id of the case.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddCaseAlertsRequest",
								"description": "alerts to add. Alerts must be exist and have the same tenantid as the cust_id of the case."
							}
						}
					}
				}
			}
		},
		"/cases/{id}/alerts{action}": {
			"put": {
				"operationId": "batchDeleteCaseAlerts",
				"responses": {
					"200": {
						"description": "Status message and the number of alerts remaining",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"size": {
													"type": "number",
													"format": "double"
												},
												"message": {
													"type": "string"
												}
											},
											"required": [
												"size",
												"message"
											],
											"type": "object"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Batch action for alerts for the given case. Only batch delete is supported.<br>\ne.g. /case/{case id}/alerts:batchDelete",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Currently, only \":batchDelete\" is supported.",
						"in": "path",
						"name": "action",
						"required": true,
						"schema": {
							"default": ":batchDelete",
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "alerts to delete",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteCaseAlertsRequest",
								"description": "alerts to delete"
							}
						}
					}
				}
			}
		},
		"/cases/{id}/comments": {
			"get": {
				"operationId": "getCaseComments",
				"responses": {
					"200": {
						"description": "List of comments",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/CaseComment"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves all comments for the case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "createCaseComment",
				"responses": {
					"200": {
						"description": "Newly added comment",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/CaseComment"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Adds a comment to the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "New comment\n```\n{ comment: \"new comment\" }\n```",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddCaseCommentRequest",
								"description": "New comment\n```\n{ comment: \"new comment\" }\n```"
							}
						}
					}
				}
			}
		},
		"/cases/{id}/comments/{commentId}": {
			"put": {
				"operationId": "updateCaseComment",
				"responses": {
					"200": {
						"description": "Success status",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Modifies the given comment in the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Comment ID",
						"in": "path",
						"name": "commentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Modified comment\n```\n{ comment: \"modified comment\" }\n```",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCaseCommentRequest",
								"description": "Modified comment\n```\n{ comment: \"modified comment\" }\n```"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteCaseComment",
				"responses": {
					"200": {
						"description": "Success status",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Removes the given comment from the given case.",
				"tags": [
					"Case"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Case ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Comment ID",
						"in": "path",
						"name": "commentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/connectors/{id}/check-point": {
			"put": {
				"operationId": "updateCheckPoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ConnectorCheckPoint"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates a connector checkpoint by ID.\nWarning: When numerous connectors roll back checkpoints during regular operating hours, it may lead to increased resource consumption and potential process interruption due to circuit breakers.\nFor considerations regarding off-peak execution, please consult with Customer Support.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateConnectorCheckPointRequest"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "getCheckPoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ConnectorCheckPoint"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves a connector checkpoint by ID.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "deleteCheckPoint",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"n": {
													"type": "number",
													"format": "double"
												}
											},
											"required": [
												"n"
											],
											"type": "object"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a connector checkpoint by ID.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/connectors/{id}": {
			"get": {
				"operationId": "getConnectorById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Connector"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves a connector configuration.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/connectors": {
			"delete": {
				"operationId": "deleteConnector",
				"responses": {
					"207": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"message": {
												"type": "string"
											},
											"status": {
												"type": "number",
												"format": "double"
											},
											"resource": {
												"type": "string"
											},
											"data": {
												"properties": {
													"n": {
														"type": "number",
														"format": "double"
													}
												},
												"required": [
													"n"
												],
												"type": "object"
											}
										},
										"required": [
											"status",
											"resource",
											"data"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Deletes a connector configuration.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "category",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "cust_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "update_profile",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "createConnector",
				"responses": {
					"207": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"message": {
												"type": "string"
											},
											"status": {
												"type": "number",
												"format": "double"
											},
											"resource": {
												"type": "string"
											},
											"data": {
												"anyOf": [
													{
														"$ref": "#/components/schemas/Connector"
													},
													{
														"$ref": "#/components/schemas/DRProfile"
													}
												]
											}
										},
										"required": [
											"status",
											"resource"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Creates a connector configuration.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "For On-premises only, update DR profile. For SaaS, the API returns a 400 error when this parameter is set to true.",
						"in": "query",
						"name": "update_profile",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateConnectorRequest"
							}
						}
					}
				}
			},
			"put": {
				"operationId": "updateConnector",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Connector"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates a connector configuration.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateConnectorRequest"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "listConnectors",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConnectorsResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of its configured connectors, either for a specified tenant or for all tenants.\nThe API returns detailed configuration information on all connectors matching the query.",
				"tags": [
					"Connector"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Optional query parameter to get all connectors assigned to a specified tenant. cust_id can be retrieved from the System | Administration | Tenants page.",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/custom_log_parsers": {
			"post": {
				"operationId": "externalCreateCustomLogParser",
				"responses": {
					"200": {
						"description": "Newly created log parser",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomLogParserCreateResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Add a custom log parser.",
				"tags": [
					"Custom Log Parser"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"cust_id": {
										"type": "string",
										"description": "Tenant ID"
									},
									"parser_name": {
										"type": "string",
										"description": "Log parser name"
									},
									"version": {
										"type": "string",
										"description": "Log parser version"
									},
									"file": {
										"items": {
											"type": "string",
											"format": "binary"
										},
										"type": "array"
									}
								},
								"required": [
									"cust_id",
									"parser_name",
									"version",
									"file"
								]
							}
						}
					}
				}
			},
			"get": {
				"operationId": "externalListCustomLogParsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomLogParserListResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of custom log parsers.\ncustom log parsers are filtered by customer id as requested.",
				"tags": [
					"Custom Log Parser"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			}
		},
		"/custom_log_parsers/{name}": {
			"put": {
				"operationId": "externalUpdateCustomLogParser",
				"responses": {
					"200": {
						"description": "Updated log parser",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomLogParserUpdateResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Update a custom log parser.",
				"tags": [
					"Custom Log Parser"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Log parser name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"cust_id": {
										"type": "string",
										"description": "Tenant ID"
									},
									"version": {
										"type": "string",
										"description": "Log parser version"
									},
									"file": {
										"items": {
											"type": "string",
											"format": "binary"
										},
										"type": "array",
										"description": "Log parser configuration files"
									}
								},
								"required": [
									"cust_id",
									"version",
									"file"
								]
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "externalDeleteCustomLogParser",
				"responses": {
					"200": {
						"description": "Whether delete was successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Delete a custom log parser.",
				"tags": [
					"Custom Log Parser"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Log parser name",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "cust_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/custom_security_events": {
			"get": {
				"operationId": "listCustomSecurityEvents",
				"responses": {
					"200": {
						"description": "list of custom security events.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomSecurityEventsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "664dbb261f0aff19f61ec4da",
													"category": "network",
													"display_name": "Data Ingestion Volume Anomaly",
													"name": "ade_outbytes_anomaly",
													"org_id": "2349751348",
													"built_in": true,
													"type": "conn",
													"xdr_event": {
														"xdr_killchain_version": "v1",
														"tags": [
															"Network Traffic Analysis"
														],
														"xdr_killchain_stage": "Initial Attempts",
														"technique": {
															"id": "XT3001",
															"name": "XDR Bytes Anomaly"
														},
														"framework_version": "v8",
														"tactic": {
															"id": "XTA0003",
															"name": "XDR SBA"
														},
														"scope": ""
													},
													"actions": [
														{
															"playbook_id": "wesadofclug298346",
															"action_id": "sdclkjb245"
														}
													],
													"cust_id": "529077457672470ea803a2f8feb52944",
													"tenants": [
														"es5yjdddiinx7swruvtlrf7d2gzdc0rf",
														"y9h5e0ik1e6txcxnk9xy5q2fyrqs39tk"
													],
													"tenant_grps": [
														"9q8ehju99uf2rw7zy11560nvcl0o359n",
														"a4pi8p7n5f8o576fzmnazoa7udx38w3g"
													],
													"created_user": "admin",
													"create_time": 1640072279,
													"updated_user": "admin2",
													"update_time": 1676439322
												},
												{
													"_id": "664dbb1ef01f6707fcab9ada",
													"category": "network",
													"display_name": "Data Ingestion Volume Anomaly2",
													"name": "ade_outbytes_anomaly2",
													"org_id": "2349751348",
													"built_in": true,
													"type": "conn",
													"xdr_event": {
														"xdr_killchain_version": "v1",
														"tags": [
															"Network Traffic Analysis"
														],
														"xdr_killchain_stage": "Initial Attempts",
														"technique": {
															"id": "XT3001",
															"name": "XDR Bytes Anomaly"
														},
														"framework_version": "v8",
														"tactic": {
															"id": "XTA0003",
															"name": "XDR SBA"
														},
														"scope": ""
													},
													"actions": [
														{
															"playbook_id": "wesadofclug298346",
															"action_id": "sdclkjb245"
														}
													],
													"cust_id": "529077457672470ea803a2f8feb52944",
													"tenants": [
														"es5yjdddiinx7swruvtlrf7d2gzdc0rf",
														"y9h5e0ik1e6txcxnk9xy5q2fyrqs39tk"
													],
													"tenant_grps": [
														"9q8ehju99uf2rw7zy11560nvcl0o359n",
														"a4pi8p7n5f8o576fzmnazoa7udx38w3g"
													],
													"created_user": "admin",
													"create_time": 1640072279,
													"updated_user": "admin2",
													"update_time": 1676439322
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of custom security events.\ncustom security events are filtered by customer id as requested.",
				"tags": [
					"Custom Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			}
		},
		"/data_sensors": {
			"get": {
				"operationId": "listDataSensors",
				"responses": {
					"200": {
						"description": "list of sensors",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSensorsResponse"
								}
							}
						}
					}
				},
				"description": "This API returns a detailed list of the managed sensors, including Data Sensors, Security Data Sensors, Modular Data Sensors, and Server Sensors (agents).",
				"tags": [
					"Data Sensor"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Optional. You can use this argument to query for all sensors assigned to a specified tenant using its ID retrieved from either the System | Collection | Sensors page or the System | Administration | Tenants page.\nIf you do not include this, the API returns all sensors accessible for the API user.",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "feature",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"agg",
								"sensor"
							]
						},
						"deprecated": true
					}
				]
			}
		},
		"/data_sensors/{id}": {
			"get": {
				"operationId": "getDataSensor",
				"responses": {
					"200": {
						"description": "details of single sensor",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSensor"
								}
							}
						}
					}
				},
				"description": "This API returns a details of the single managed sensor, including Data Sensors, Security Data Sensors, Modular Data Sensors, and Server Sensors (agents).",
				"tags": [
					"Data Sensor"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "You can use this argument to query for details for a specific sensor using its ID retrieved from the System | Collection | Sensors page.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "deleteDataSensor",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete an existing data sensor.",
				"tags": [
					"Data Sensor"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					},
					{
						"in": "query",
						"name": "cust_id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "5f9d9b9a484c7d9cfe4b4045"
					}
				]
			}
		},
		"/dr_profiles": {
			"get": {
				"operationId": "listDRProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the list of DR profiles.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/DRProfile"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "664dbb261f0aff19f61ec4da",
													"name": "Default",
													"data_srcs": [
														"aws cloudtrail vpcflow",
														"office365"
													],
													"data_sinks": [],
													"dr_conf": "{\"ip_host_resolution\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"active_directory\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"ip_reputation\":{\"stats\":\"on\",\"pull_interval\":120},\"maltrace\":{\"stats\":\"on\"},\"finger_print\":{\"stats\":\"on\"},\"session_dedupe\":{\"stats\":\"off\",\"window\":30000,\"key_fields\":[\"srcip\",\"srcport\",\"dstip\",\"dstport\",\"proto\",\"vlan\",\"msgtype\"],\"state_fields\":[\"engid\"]},\"internal_dl\":{\"stats\":\"on\"},\"service_clustering\":{\"stats\":\"off\"},\"elastic_index\":{\"stats\":\"off\",\"default_name\":\"adr\"},\"private_ranges\":{\"stats\":\"off\",\"CIDR\":[]}}"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves a list of DR profiles.\nFor On-premises only.",
				"tags": [
					"DR Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "createDRProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the created DR profile.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/DRProfile"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "664dbb261f0aff19f61ec4da",
												"name": "Default",
												"data_srcs": [
													"aws cloudtrail vpcflow",
													"office365"
												],
												"data_sinks": [],
												"dr_conf": "{\"ip_host_resolution\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"active_directory\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"ip_reputation\":{\"stats\":\"on\",\"pull_interval\":120},\"maltrace\":{\"stats\":\"on\"},\"finger_print\":{\"stats\":\"on\"},\"session_dedupe\":{\"stats\":\"off\",\"window\":30000,\"key_fields\":[\"srcip\",\"srcport\",\"dstip\",\"dstport\",\"proto\",\"vlan\",\"msgtype\"],\"state_fields\":[\"engid\"]},\"internal_dl\":{\"stats\":\"on\"},\"service_clustering\":{\"stats\":\"off\"},\"elastic_index\":{\"stats\":\"off\",\"default_name\":\"adr\"},\"private_ranges\":{\"stats\":\"off\",\"CIDR\":[]}}"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Creates a new DR profile.\nFor On-premises only.",
				"tags": [
					"DR Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The request body containing the details of the DR profile to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDRProfileRequest",
								"description": "- The request body containing the details of the DR profile to be created."
							}
						}
					}
				}
			}
		},
		"/dr_profiles/{name}": {
			"get": {
				"operationId": "getDRProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the DR profile.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/DRProfile"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "664dbb261f0aff19f61ec4da",
												"name": "Default",
												"data_srcs": [
													"aws cloudtrail vpcflow",
													"office365"
												],
												"data_sinks": [],
												"dr_conf": "{\"ip_host_resolution\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"active_directory\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"ip_reputation\":{\"stats\":\"on\",\"pull_interval\":120},\"maltrace\":{\"stats\":\"on\"},\"finger_print\":{\"stats\":\"on\"},\"session_dedupe\":{\"stats\":\"off\",\"window\":30000,\"key_fields\":[\"srcip\",\"srcport\",\"dstip\",\"dstport\",\"proto\",\"vlan\",\"msgtype\"],\"state_fields\":[\"engid\"]},\"internal_dl\":{\"stats\":\"on\"},\"service_clustering\":{\"stats\":\"off\"},\"elastic_index\":{\"stats\":\"off\",\"default_name\":\"adr\"},\"private_ranges\":{\"stats\":\"off\",\"CIDR\":[]}}"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves a DR profile by its name.\nFor On-premises only.",
				"tags": [
					"DR Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the DR profile.",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "updateDRProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the updated DR profile.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/DRProfile"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "664dbb261f0aff19f61ec4da",
												"name": "Default",
												"data_srcs": [
													"aws cloudtrail vpcflow",
													"office365"
												],
												"data_sinks": [],
												"dr_conf": "{\"ip_host_resolution\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"active_directory\":{\"stats\":\"on\",\"default_ttl\":300,\"persistent\":true},\"ip_reputation\":{\"stats\":\"on\",\"pull_interval\":120},\"maltrace\":{\"stats\":\"on\"},\"finger_print\":{\"stats\":\"on\"},\"session_dedupe\":{\"stats\":\"off\",\"window\":30000,\"key_fields\":[\"srcip\",\"srcport\",\"dstip\",\"dstport\",\"proto\",\"vlan\",\"msgtype\"],\"state_fields\":[\"engid\"]},\"internal_dl\":{\"stats\":\"on\"},\"service_clustering\":{\"stats\":\"off\"},\"elastic_index\":{\"stats\":\"off\",\"default_name\":\"adr\"},\"private_ranges\":{\"stats\":\"off\",\"CIDR\":[]}}"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Updates an existing DR profile.\nFor On-premises only.",
				"tags": [
					"DR Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the DR profile to be updated.",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the updated details of the DR profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateDRProfileRequest",
								"description": "- The request body containing the updated details of the DR profile."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteDRProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the number of deleted profiles.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"n": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"n"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"n": 1
										}
									}
								}
							}
						}
					}
				},
				"description": "Deletes a DR profile by its name.\nFor On-premises only.",
				"tags": [
					"DR Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The name of the DR profile to be deleted.",
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/entity_usages/entity_list/{scope}": {
			"get": {
				"operationId": "getEntityList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/EntityUsageEntityListResponseExternal"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of entities.",
				"tags": [
					"Entity Usage"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "scope",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/EntityUsageEntityListScopeType"
						}
					},
					{
						"description": "YYYY-MM-DD",
						"in": "query",
						"name": "date",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2024-01-01"
					},
					{
						"description": "tenant id for filter or 'all-tenants'",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "tenant group id for filter",
						"in": "query",
						"name": "tenant_group_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/incidents": {
			"get": {
				"operationId": "listIncidents",
				"responses": {
					"200": {
						"description": "list of existing incidents:",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IncidentsResponse_ExternalIncident_"
								}
							}
						}
					}
				},
				"description": "Retrieves detailed list of incidents, optionally filtered by tenant, assignee, tags, priority, status, and score.\nYou can also specify that the incidents returned by the API be sorted according to a specified parameter.",
				"tags": [
					"Incident"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Use either of these arguments to query for all incidents assigned to a specified tenant using its ID retrieved from either the Incidents page or the System | Administration | Tenants page, as described below.",
						"in": "query",
						"name": "tenantid",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tenant_name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~tenant_name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~ticket_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "incident_score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~incident_score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~incident_score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~incident_score",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to query for all incidents matching a specified status. You can see the statuses associated with incidents in the Incidents page displayed in Table mode.\nThe possible values are New, In Progress, Resolved, and Cancelled.",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to query for all incidents matching a specified priority. You can see the priorities associated with incidents in the Incidents\npage displayed in Table mode. The possible values are Critical, High, Medium, and Low.",
						"in": "query",
						"name": "priority",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~priority",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "modified_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~modified_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~modified_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "created_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~created_by",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~created_at",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to query for all incidents with a specified tag.\nYou can see the tags assigned to an incident in the Incident Properties panel at the left of the Incident Detail display.\nYou can specify multiple tags in a single query by separating the tags with a comma.\nFor example:\n https://<Stellar Cyber_IP>/connect/api/v1/incidents?tags=test1,test2",
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~tags",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to query for all incidents assigned to a specific user (including Unassigned).\nThe easiest place to find assignees is in the Investigate | Incidents page displayed in Table mode.",
						"in": "query",
						"name": "assignee",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "NOT~assignee",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "priority_num",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "NOT~priority_num",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~priority_num",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~priority_num",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use either of these arguments to query for all incidents assigned to a specified tenant using its ID retrieved from either the Incidents page or the System | Administration | Tenants page, as described below.",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"default": "all",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "event_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "event_index",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to specify the minimum score associated with a system-generated case for it to be returned by a query.",
						"in": "query",
						"name": "min_score",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to specify the minimum number of alerts associated with a system-generated incident for it to be returned by a query.",
						"in": "query",
						"name": "min_size_auto",
						"required": false,
						"schema": {
							"default": 2,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "search_field",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to skip the specified number of matching records before returning results. This argument is most useful when used together\nwith the sort and order arguments, allowing you to, for example, query for the second 100 incidents with the highest incident score:\n http://<Stellar Cyber_IP>/connect/api/v1/incidents?sort=incident_score&order=desc&skip=100",
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to limit the number of results returned by your query to the specified integer value. This argument is particularly useful when\nused together with the sort and order arguments, allowing you to, for example, query for incidents with the highest incident score:\n http://<Stellar Cyber_IP>/connect/api/v1/incidents?limit=10&sort=incident_score&order=desc",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to sort the incidents returned by your query according to the specified field. <br>\nYou can sort your results using any of the following fields:<br>\n ticket_id – Numerical sort.<br>\n name – Alphabetical sort.<br>\n incident_score – Numerical sort.<br>\n size – Numerical sort by number of associated alerts.<br>\n status – Sort order is New, In Progress, Resolved, and Cancelled for descending; reversed for ascending. <br>\n priority – Sort order is Critical, High, Medium, and Low for descending; reversed for ascending.<br>\n assignee – Alphabetical sort. <br>\n modified_at – Date sort. <br>\n created_by – Alphabetical sort. <br>\n created_at – Date sort.",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to specify whether the sort specified as part of your query is applied in either ascending (asc) or descending (desc) order.\nFor example, the following query returns the five incidents with the most associated alerts from greatest to least.\n http://<Stellar Cyber_IP>/connect/api/v1/incidents?limit=5&sort=size&order=desc",
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "editIncident",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/ExternalIncident"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Incident"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditIncidentRequest"
							}
						}
					}
				}
			}
		},
		"/incidents/{id}/observables": {
			"get": {
				"operationId": "getIncidentObservables",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IGObservableData"
								}
							}
						}
					}
				},
				"description": "Redirected to /cases/{id}/observables.",
				"tags": [
					"Incident"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ingestion-stats/connector": {
			"get": {
				"operationId": "getConnectorIngestions",
				"responses": {
					"200": {
						"description": "list of ingestion values.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IngestionsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"total_ingestion": 734089325,
													"tenant_name": "my tenant",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "connector1"
												},
												{
													"total_ingestion": 3564867,
													"tenant_name": "my tenant2",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "connector 2"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the ingestion value of all connectors between provided start_time and end_time. <br/>\nAdditional filters can be applied to narrow down the results. <br/>\nAvailable filters: cust_id, connector_name.",
				"tags": [
					"Ingestion Stats"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "start time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "start_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-01T00:00:00.000Z"
					},
					{
						"description": "end time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "end_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-02T00:00:00.000Z"
					},
					{
						"description": "customer id (optional)",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "e1b85a16c54940c985bf93eb7dcf78d"
					},
					{
						"description": "connector name (optional)",
						"in": "query",
						"name": "connector_name",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "connector1"
					}
				]
			}
		},
		"/ingestion-stats/sensor": {
			"get": {
				"operationId": "getSensorIngestions",
				"responses": {
					"200": {
						"description": "list of ingestion values.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IngestionsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"total_ingestion": 734089325,
													"tenant_name": "my tenant",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "weqfjolbg3145dsfv"
												},
												{
													"total_ingestion": 3564867,
													"tenant_name": "my tenant2",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "weqfjolbg3145dsfv"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the ingestion value of all sensors between provided start_time and end_time. <br/>\nAdditional filters can be applied to narrow down the results. <br/>\nAvailable filters: cust_id, sensor_id.",
				"tags": [
					"Ingestion Stats"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "start time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "start_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-01T00:00:00.000Z"
					},
					{
						"description": "end time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "end_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-02T00:00:00.000Z"
					},
					{
						"description": "customer id (optional)",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "e1b85a16c54940c985bf93eb7dcf78d"
					},
					{
						"description": "sensor id (optional)",
						"in": "query",
						"name": "sensor_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "weqfjolbg3145dsfv"
					}
				]
			}
		},
		"/ingestion-stats/log-source": {
			"get": {
				"operationId": "getLogSourceIngestions",
				"responses": {
					"200": {
						"description": "list of ingestion values.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IngestionsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"total_ingestion": 734089325,
													"tenant_name": "my tenant",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "product 1",
													"source_ip": "0.0.0.0",
													"port": 1234
												},
												{
													"total_ingestion": 3564867,
													"tenant_name": "my tenant2",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "product 2",
													"source_ip": "192.168.0.8",
													"port": 5081
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the ingestion value of all log sources between provided start_time and end_time. <br/>\nAdditional filters can be applied to narrow down the results. <br/>\nAvailable filters: log_type, source_ip, destination_port, cust_id.",
				"tags": [
					"Ingestion Stats"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "start time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "start_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-01T00:00:00.000Z"
					},
					{
						"description": "end time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "end_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-02T00:00:00.000Z"
					},
					{
						"description": "product name (optional)",
						"in": "query",
						"name": "log_type",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "product 1"
					},
					{
						"description": "source ip (optional)",
						"in": "query",
						"name": "source_ip",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "192.168.1.1"
					},
					{
						"description": "destination port (optional)",
						"in": "query",
						"name": "destination_port",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						},
						"example": 7878
					},
					{
						"description": "customer id (optional)",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "e1b85a16c54940c985bf93eb7dcf78d"
					}
				]
			}
		},
		"/ingestion-stats/log-type": {
			"get": {
				"operationId": "getLogTypeIngestions",
				"responses": {
					"200": {
						"description": "list of ingestion values.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IngestionsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"total_ingestion": 734089325,
													"tenant_name": "my tenant",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "product 1"
												},
												{
													"total_ingestion": 3564867,
													"tenant_name": "my tenant2",
													"cust_id": "e1b85a16c54940c9893eb7dcf78d",
													"entry_identifier": "product 2"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the ingestion value of all log types between provided start_time and end_time. <br/>\nAdditional filters can be applied to narrow down the results. <br/>\nAvailable filters: log_type(product name), cust_id.",
				"tags": [
					"Ingestion Stats"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "start time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "start_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-01T00:00:00.000Z"
					},
					{
						"description": "end time in [format](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats)",
						"in": "query",
						"name": "end_time",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "2021-08-02T00:00:00.000Z"
					},
					{
						"description": "product name (optional)",
						"in": "query",
						"name": "log_type",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "product 1"
					},
					{
						"description": "customer id (optional)",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "e1b85a16c54940c985bf93eb7dcf78d"
					}
				]
			}
		},
		"/insert_ser_bulk": {
			"post": {
				"operationId": "bulk",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InsertSerBulkResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "This API is only available for on-premises use. In SaaS, it will return a 404 error.<br>",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InsertSerBulkRequest"
							}
						}
					}
				}
			}
		},
		"/insert_ser": {
			"post": {
				"operationId": "create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InsertSerResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "This API is only available for on-premises use. In SaaS, it will return a 404 error.<br>",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Fields in aella-ser Index<br>\nThe table below lists the fields in the aella-ser index. <br>\nRequired fields listed are listed in bold with an asterisk. <br>\nYou can also include custom fields. <br>\nCustom fields are displayed after standard fields under custom_ser_field.<br>\n<table>\n<thead><tr><td>Field Name </td><td> Elasticsearch Type </td><td> Description</td></tr></thead>\n<tbody>\n<tr><td>actual </td><td> float </td><td> Either an anomalous value detected by ML jobs or an aggregation value detected by Statistical Analytics jobs. </td></tr>\n<tr><td>typical </td><td> float </td><td> The typical value established by the ML model.</td></tr>\n<tr><td>stellar.alert_time </td><td> date </td><td> The time at which the anomaly was detected</td></tr>\n<tr><td>timestamp * </td><td> date </td><td> The actual time at which the event took place.</td></tr>\n<tr><td>write_time </td><td> date </td><td> The time the record was written to Elasticsearch.</td></tr>\n<tr><td>event_category </td><td> string </td><td> The category of the event category. Acceptable values are killchain, network, or uba.</td></tr>\n<tr><td>event_name * </td><td> string </td><td> The name of the event.</td></tr>\n<tr><td>event_score </td><td> long </td><td> The score assigned to the event, indicating a combination of severity, fidelity, and threat_score. Acceptable values range from 0-100.</td></tr>\n<tr><td>event_source *  </td><td> string </td><td> The source of the event. For example, ActZero.</td></tr>\n<tr><td>event_status * </td><td> string </td><td> The status of the event. Acceptable values include New, In Progress, Ignored, and Closed.</td></tr>\n<tr><td>event_type  </td><td> string </td><td> The type of event.</td></tr>\n<tr><td>severity  </td><td> long </td><td> A numerical score indicating the severity of an event on a scale from 0 (least severe) to 100 (most severe).</td></tr>\n<tr><td>fidelity  </td><td> double </td><td> A numerical score indicating the level of confidence in a security event on a scale from 0 (least confident) to 100 (most confident).</td></tr>\n<tr><td>threat_score </td><td> long </td><td> A numerical score measuring the threat level for the event, based on severity, fidelity, and threat intel. Acceptable values range from 0 (lowest threat) to 100 (highest threat).</td></tr>\n<tr><td>lateral </td><td> boolean </td><td> Specifies whether the Interflow data supporting the event is from private or to private. </td></tr>\n<tr><td>orig_id  </td><td> string </td><td> The ID for the raw data supporting the event in Elasticsearch.</td></tr>\n<tr><td>orig_index  </td><td> string </td><td> The index for the raw data supporting the event in Elasticsearch.</td></tr>\n<tr><td>detected_field  </td><td> string </td><td> For ML jobs with a single detection field.</td></tr>\n<tr><td>detected_fields  </td><td> array of strings </td><td> For ML jobs with multiple detection fields. </td></tr>\n<tr><td>detected_value  </td><td> string </td><td> For ML jobs with a single detection field. </td></tr>\n<tr><td>detected_values  </td><td> array of strings </td><td> For ML jobs with multiple detection fields. </td></tr>\n<tr><td>detector_index  </td><td> long </td><td> The detector index in ML detections.</td></tr>\n<tr><td>start_bucket_time  </td><td> long </td><td> The starting timestamp of the data that caused the anomaly.</td></tr>\n<tr><td>end_bucket_time </td><td> long </td><td> The ending timestamp of the data that cause the anomaly. This field combines with start_bucket_time to form a time range for the event.</td></tr>\n<tr><td>custom_ser_field </td><td> object </td><td> Use a unique namespace (for example, ActZero), to avoid conflicts with existing fields in ElasticSearch.</td></tr>\n</tbody>\n</table>",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InsertSerRequest",
								"description": "Fields in aella-ser Index<br>\nThe table below lists the fields in the aella-ser index. <br>\nRequired fields listed are listed in bold with an asterisk. <br>\nYou can also include custom fields. <br>\nCustom fields are displayed after standard fields under custom_ser_field.<br>\n<table>\n<thead><tr><td>Field Name </td><td> Elasticsearch Type </td><td> Description</td></tr></thead>\n<tbody>\n<tr><td>actual </td><td> float </td><td> Either an anomalous value detected by ML jobs or an aggregation value detected by Statistical Analytics jobs. </td></tr>\n<tr><td>typical </td><td> float </td><td> The typical value established by the ML model.</td></tr>\n<tr><td>stellar.alert_time </td><td> date </td><td> The time at which the anomaly was detected</td></tr>\n<tr><td>timestamp * </td><td> date </td><td> The actual time at which the event took place.</td></tr>\n<tr><td>write_time </td><td> date </td><td> The time the record was written to Elasticsearch.</td></tr>\n<tr><td>event_category </td><td> string </td><td> The category of the event category. Acceptable values are killchain, network, or uba.</td></tr>\n<tr><td>event_name * </td><td> string </td><td> The name of the event.</td></tr>\n<tr><td>event_score </td><td> long </td><td> The score assigned to the event, indicating a combination of severity, fidelity, and threat_score. Acceptable values range from 0-100.</td></tr>\n<tr><td>event_source *  </td><td> string </td><td> The source of the event. For example, ActZero.</td></tr>\n<tr><td>event_status * </td><td> string </td><td> The status of the event. Acceptable values include New, In Progress, Ignored, and Closed.</td></tr>\n<tr><td>event_type  </td><td> string </td><td> The type of event.</td></tr>\n<tr><td>severity  </td><td> long </td><td> A numerical score indicating the severity of an event on a scale from 0 (least severe) to 100 (most severe).</td></tr>\n<tr><td>fidelity  </td><td> double </td><td> A numerical score indicating the level of confidence in a security event on a scale from 0 (least confident) to 100 (most confident).</td></tr>\n<tr><td>threat_score </td><td> long </td><td> A numerical score measuring the threat level for the event, based on severity, fidelity, and threat intel. Acceptable values range from 0 (lowest threat) to 100 (highest threat).</td></tr>\n<tr><td>lateral </td><td> boolean </td><td> Specifies whether the Interflow data supporting the event is from private or to private. </td></tr>\n<tr><td>orig_id  </td><td> string </td><td> The ID for the raw data supporting the event in Elasticsearch.</td></tr>\n<tr><td>orig_index  </td><td> string </td><td> The index for the raw data supporting the event in Elasticsearch.</td></tr>\n<tr><td>detected_field  </td><td> string </td><td> For ML jobs with a single detection field.</td></tr>\n<tr><td>detected_fields  </td><td> array of strings </td><td> For ML jobs with multiple detection fields. </td></tr>\n<tr><td>detected_value  </td><td> string </td><td> For ML jobs with a single detection field. </td></tr>\n<tr><td>detected_values  </td><td> array of strings </td><td> For ML jobs with multiple detection fields. </td></tr>\n<tr><td>detector_index  </td><td> long </td><td> The detector index in ML detections.</td></tr>\n<tr><td>start_bucket_time  </td><td> long </td><td> The starting timestamp of the data that caused the anomaly.</td></tr>\n<tr><td>end_bucket_time </td><td> long </td><td> The ending timestamp of the data that cause the anomaly. This field combines with start_bucket_time to form a time range for the event.</td></tr>\n<tr><td>custom_ser_field </td><td> object </td><td> Use a unique namespace (for example, ActZero), to avoid conflicts with existing fields in ElasticSearch.</td></tr>\n</tbody>\n</table>"
							}
						}
					}
				}
			}
		},
		"/log_filters": {
			"get": {
				"operationId": "listLogFilters",
				"responses": {
					"200": {
						"description": "list of log filters.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFiltersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "633da654a7391b2e72c1938c",
													"content": "{\"dev_type\":\"\",\"rules\":{\"test\":{\"type\":\"number\",\"op\":\"==\",\"value\":[200]}}}",
													"created_at": 1664984660,
													"created_by": "admin1",
													"cust_id": "all-tenants",
													"in_use": {},
													"modified_at": 1664984660,
													"modified_by": "admin1",
													"name": "test",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
												},
												{
													"_id": "638e6d7256865be48b5d765d",
													"content": "{\"dev_type\":\"\",\"rules\":{\"srcport\":{\"type\":\"number\",\"op\":\"==\",\"value\":[5560]}}}",
													"created_at": 1670278514,
													"created_by": "my_account@abc.com",
													"cust_id": "all-tenants",
													"in_use": {
														"connector": [
															"connector1"
														]
													},
													"name": "test-all-tenants",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of log filters.\nlog filters are filtered by customer id as requested.",
				"tags": [
					"Log Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			},
			"post": {
				"operationId": "createLogFilter",
				"responses": {
					"200": {
						"description": "created log filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "646c6f1e484c7d9cfe4b4047",
												"content": "{\"dev_type\":\"123abc\",\"rules\":{\"ids.metadata.created_at\":{\"type\":\"string\",\"op\":\"==\",\"value\":[\"999\"]}}}",
												"created_at": 1684827934,
												"created_by": "my_account@abc.com",
												"cust_id": "0ffbd27a29864302a05773c7b7dc406a",
												"name": "jack test create 2",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a log filter.",
				"tags": [
					"Log Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "log filter data to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogfwdFilterFormData",
								"description": "log filter data to be created"
							}
						}
					}
				}
			}
		},
		"/log_filters/{id}": {
			"get": {
				"operationId": "getLogFilter",
				"responses": {
					"200": {
						"description": "log filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "638e6d7256865be48b5d765d",
												"content": "{\"dev_type\":\"\",\"rules\":{\"srcport\":{\"type\":\"number\",\"op\":\"==\",\"value\":[5560]}}}",
												"created_at": 1670278514,
												"created_by": "my_account@abc.com",
												"cust_id": "all-tenants",
												"in_use": {
													"connector": [
														"connector1"
													]
												},
												"name": "test-all-tenants",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves log filter by id.",
				"tags": [
					"Log Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of the log filter.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "log filter id to GET"
					}
				]
			},
			"put": {
				"operationId": "updateLogFilter",
				"responses": {
					"200": {
						"description": "updated log filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "646c673e484c7d9cfe4b4045",
												"content": "{\"dev_type\":\"test source\",\"rules\":{\"appid_name\":{\"type\":\"string\",\"op\":\"==\",\"value\":[\"123\"]}}}",
												"created_at": 1684825918,
												"created_by": "my_account@abc.com",
												"cust_id": "2414463fa1624e75941e8e4fffe22f18",
												"modified_at": 1684827778,
												"modified_by": "my_account@abc.com",
												"name": "jack test create",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Update an existing log filter.",
				"tags": [
					"Log Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					}
				],
				"requestBody": {
					"description": "log filter data to be updated",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogfwdFilterFormData",
								"description": "log filter data to be updated"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteLogFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": "ok\n"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete an existing log filter.",
				"tags": [
					"Log Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					}
				]
			}
		},
		"/logfwd_filters": {
			"get": {
				"operationId": "listLogfwdFilters",
				"responses": {
					"200": {
						"description": "list of logfwd filters.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFiltersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "633da654a7391b2e72c1938c",
													"content": "{\"dev_type\":\"\",\"rules\":{\"test\":{\"type\":\"number\",\"op\":\"==\",\"value\":[200]}}}",
													"created_at": 1664984660,
													"created_by": "admin1",
													"cust_id": "all-tenants",
													"in_use": {},
													"modified_at": 1664984660,
													"modified_by": "admin1",
													"name": "test",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
												},
												{
													"_id": "638e6d7256865be48b5d765d",
													"content": "{\"dev_type\":\"\",\"rules\":{\"srcport\":{\"type\":\"number\",\"op\":\"==\",\"value\":[5560]}}}",
													"created_at": 1670278514,
													"created_by": "my_account@abc.com",
													"cust_id": "all-tenants",
													"in_use": {
														"connector": [
															"connector1"
														]
													},
													"name": "test-all-tenants",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of logfwd filters.\nlogfwd filters are filtered by customer id as requested.\n<br/>This API is deprecated. Use /log_filters instead.",
				"tags": [
					"Log Forward Filter"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			},
			"post": {
				"operationId": "createLogfwdFilter",
				"responses": {
					"200": {
						"description": "created logfwd filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "646c6f1e484c7d9cfe4b4047",
												"content": "{\"dev_type\":\"123abc\",\"rules\":{\"ids.metadata.created_at\":{\"type\":\"string\",\"op\":\"==\",\"value\":[\"999\"]}}}",
												"created_at": 1684827934,
												"created_by": "my_account@abc.com",
												"cust_id": "0ffbd27a29864302a05773c7b7dc406a",
												"name": "jack test create 2",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a logfwd filter.\n<br/>This API is deprecated. Use /log_filters instead.",
				"tags": [
					"Log Forward Filter"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "logfwd filter data to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogfwdFilterFormData",
								"description": "logfwd filter data to be created"
							}
						}
					}
				}
			}
		},
		"/logfwd_filters/{id}": {
			"get": {
				"operationId": "getLogfwdFilter",
				"responses": {
					"200": {
						"description": "logfwd filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "638e6d7256865be48b5d765d",
												"content": "{\"dev_type\":\"\",\"rules\":{\"srcport\":{\"type\":\"number\",\"op\":\"==\",\"value\":[5560]}}}",
												"created_at": 1670278514,
												"created_by": "my_account@abc.com",
												"cust_id": "all-tenants",
												"in_use": {
													"connector": [
														"connector1"
													]
												},
												"name": "test-all-tenants",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves logfwd filter by id.\n<br/>This API is deprecated. Use /log_filters instead.",
				"tags": [
					"Log Forward Filter"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of the logfwd filter.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "logfwd filter id to GET"
					}
				]
			},
			"put": {
				"operationId": "updateLogfwdFilter",
				"responses": {
					"200": {
						"description": "updated logfwd filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogfwdFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "646c673e484c7d9cfe4b4045",
												"content": "{\"dev_type\":\"test source\",\"rules\":{\"appid_name\":{\"type\":\"string\",\"op\":\"==\",\"value\":[\"123\"]}}}",
												"created_at": 1684825918,
												"created_by": "my_account@abc.com",
												"cust_id": "2414463fa1624e75941e8e4fffe22f18",
												"modified_at": 1684827778,
												"modified_by": "my_account@abc.com",
												"name": "jack test create",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Update an existing logfwd filter.\n<br/>This API is deprecated. Use /log_filters instead.",
				"tags": [
					"Log Forward Filter"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					}
				],
				"requestBody": {
					"description": "logfwd filter data to be updated",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogfwdFilterFormData",
								"description": "logfwd filter data to be updated"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteLogfwdFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": "ok\n"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete an existing logfwd filter.\n<br/>This API is deprecated. Use /log_filters instead.",
				"tags": [
					"Log Forward Filter"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					}
				]
			}
		},
		"/lookups": {
			"get": {
				"operationId": "listLookups",
				"responses": {
					"200": {
						"description": "list of lookups.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LookupsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "63e1b3bcc630915e76d98c85",
													"created_at": 1675735996806,
													"created_by": "admin1",
													"cust_id": "all-tenants",
													"in_use": {},
													"name": "lookup ip",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
													"type": "ip",
													"values": [
														"192.168.2.2",
														"192.168.1.1"
													]
												},
												{
													"_id": "63e1b64837510b60aa6933fc",
													"created_at": 1675736648277,
													"created_by": "admin2",
													"cust_id": "all-tenants",
													"in_use": {},
													"name": "lookup date",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
													"type": "date",
													"values": [
														"2023-02-07T02:23:58.522Z",
														"123"
													]
												},
												{
													"_id": "63e1b42a37510b60aa6933fb",
													"created_at": 1675736106067,
													"created_by": "admin3",
													"cust_id": "all-tenants",
													"in_use": {},
													"name": "lookup number",
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
													"type": "number",
													"values": [
														456,
														123
													]
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of lookups.\nlookups are filtered by customer id as requested.",
				"tags": [
					"Lookup"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			},
			"post": {
				"operationId": "createLookup",
				"responses": {
					"200": {
						"description": "created lookup.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LookupResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "63e1b3bcc630915e76d98c85",
												"created_at": 1675735996806,
												"created_by": "admin1",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup ip",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "ip",
												"values": [
													"192.168.2.2",
													"192.168.1.1"
												]
											}
										}
									},
									"Example 2": {
										"value": {
											"data": {
												"_id": "63e1b64837510b60aa6933fc",
												"created_at": 1675736648277,
												"created_by": "admin2",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup date",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "date",
												"values": [
													"2023-02-07T02:23:58.522Z",
													"123"
												]
											}
										}
									},
									"Example 3": {
										"value": {
											"data": {
												"_id": "63e1b42a37510b60aa6933fb",
												"created_at": 1675736106067,
												"created_by": "admin3",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup number",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "number",
												"values": [
													456,
													123
												]
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a lookup.",
				"tags": [
					"Lookup"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "lookup data to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LookupFormData",
								"description": "lookup data to be created"
							}
						}
					}
				}
			}
		},
		"/lookups/{id}": {
			"get": {
				"operationId": "getLookup",
				"responses": {
					"200": {
						"description": "lookup.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LookupResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "63e1b3bcc630915e76d98c85",
												"created_at": 1675735996806,
												"created_by": "admin1",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup ip",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "ip",
												"values": [
													"192.168.2.2",
													"192.168.1.1"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves lookup by id.",
				"tags": [
					"Lookup"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of the lookup.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "63e1b3bcc630915e76d98c85"
					}
				]
			},
			"put": {
				"operationId": "updateLookup",
				"responses": {
					"200": {
						"description": "updated lookup.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LookupResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "63e1b3bcc630915e76d98c85",
												"created_at": 1675735996806,
												"created_by": "admin1",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup ip",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "ip",
												"values": [
													"192.168.2.2",
													"192.168.1.1"
												]
											}
										}
									},
									"Example 2": {
										"value": {
											"data": {
												"_id": "63e1b64837510b60aa6933fc",
												"created_at": 1675736648277,
												"created_by": "admin2",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup date",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "date",
												"values": [
													"2023-02-07T02:23:58.522Z",
													"123"
												]
											}
										}
									},
									"Example 3": {
										"value": {
											"data": {
												"_id": "63e1b42a37510b60aa6933fb",
												"created_at": 1675736106067,
												"created_by": "admin3",
												"cust_id": "all-tenants",
												"in_use": {},
												"name": "lookup number",
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"type": "number",
												"values": [
													456,
													123
												]
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Update an existing lookup.",
				"tags": [
					"Lookup"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of lookup to be updated",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "63e1b42a37510b60aa6933fb"
					}
				],
				"requestBody": {
					"description": "lookup data to be updated",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LookupFormData",
								"description": "lookup data to be updated"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteLookup",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": "ok\n"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete an existing lookup.",
				"tags": [
					"Lookup"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of the lookup to be deleted",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "63e1b42a37510b60aa6933fb"
					}
				]
			}
		},
		"/phonehomes": {
			"get": {
				"operationId": "getPhoneHome",
				"responses": {
					"200": {
						"description": "phone home data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PhoneHomeResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"enable_log_to_cloud": false,
												"enable_log_to_dp": true,
												"logs_to_keep": 7,
												"space_used": 123.45,
												"phonehome_server": "123.321.111.222"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves phone home data.",
				"tags": [
					"Phone Home"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/privilege_profiles/_names": {
			"get": {
				"operationId": "getPrivilegeProfileNames",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/PrivilegeProfileName"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Privilege Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/report-configs": {
			"get": {
				"operationId": "listReportConfig",
				"responses": {
					"200": {
						"description": "list of existing reports.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReportConfigsResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "632f7de4f51d5f4bf49960c8",
													"asset_tag": "",
													"created_at": 1664056804902,
													"created_by": "admin1",
													"cust_id": "all-tenants",
													"lastGenerationStep": "Send Report To Server",
													"last_processing_time": 1686855632511,
													"modified_at": 1686855632536,
													"modified_by": "_stellar_report_user_",
													"month_day": null,
													"name": "xtest",
													"object_data_list": "report_server_security",
													"object_list": "REPORT",
													"object_template_name": "Server Security",
													"org_id": "0c5b67d2e9e54398be1e4d1cff8edc3d",
													"page_orientation": "l",
													"processing_status": "failed",
													"query_id": null,
													"receiver_email": "my-email@my-org",
													"report_frequency": "daily",
													"report_time_range": "5h",
													"send_csv": true,
													"send_time": 19,
													"stats": {
														"memory": "5.98 MB",
														"reportLength": 673383,
														"time": 10391
													},
													"system": false,
													"table_size": "25",
													"tenant": "all-tenants",
													"week_day": null
												},
												{
													"_id": "632f7de4f51d5f4bf49960c9",
													"asset_tag": "",
													"created_at": 1664056804902,
													"created_by": "admin1",
													"cust_id": "all-tenants",
													"lastGenerationStep": "Send Report To Server",
													"last_processing_time": 1686855632511,
													"modified_at": 1686855632536,
													"modified_by": "_stellar_report_user_",
													"month_day": null,
													"name": "xtest2",
													"object_data_list": "report_server_security",
													"object_list": "REPORT",
													"object_template_name": "Server Security",
													"org_id": "0c5b64d2e9e54398be1e4d1cfa1edc3d",
													"page_orientation": "l",
													"processing_status": "failed",
													"query_id": null,
													"receiver_email": "my-email2@my-org",
													"report_frequency": "daily",
													"report_time_range": "5h",
													"send_csv": true,
													"send_time": 19,
													"stats": {
														"memory": "5.98 MB",
														"reportLength": 673383,
														"time": 10391
													},
													"system": false,
													"table_size": "25",
													"tenant": "all-tenants",
													"week_day": null
												}
											],
											"total": 2
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of existing reports.\nList is filtered by customer id of the requester(request.query.cust_id).\nOr List is filtered by tenant ids under the control of the requester if requester's role is 'partner'.\nrequest.query.cust_id has a priority.",
				"tags": [
					"Report Config"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "createReportConfig",
				"responses": {
					"200": {
						"description": "created schedule report config.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReportConfigResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "632f7de4f51d5f4bf49960c8",
												"asset_tag": "",
												"created_at": 1664056804902,
												"created_by": "admin1",
												"cust_id": "all-tenants",
												"lastGenerationStep": "Send Report To Server",
												"last_processing_time": 1686855632511,
												"month_day": null,
												"name": "x-test",
												"object_data_list": "report_server_security",
												"object_list": "REPORT",
												"object_template_name": "Server Security",
												"org_id": "0c5b67d2e9e54398be1e4d1cff8edc3d",
												"page_orientation": "l",
												"processing_status": "failed",
												"query_id": null,
												"receiver_email": "my-email@my-org",
												"report_frequency": "daily",
												"report_time_range": "5h",
												"send_csv": true,
												"send_time": 19,
												"stats": {
													"memory": "5.98 MB",
													"reportLength": 673383,
													"time": 10391
												},
												"system": false,
												"table_size": "25",
												"tenant": "all-tenants",
												"week_day": null
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a schedule report config.",
				"tags": [
					"Report Config"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "schedule report config data to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReportConfigFormData",
								"description": "schedule report config data to be created"
							}
						}
					}
				}
			}
		},
		"/report-configs/{id}": {
			"delete": {
				"operationId": "deleteReportConfig",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": "ok\n"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete a schedule report config.",
				"tags": [
					"Report Config"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "646c673e484c7d9cfe4b4045"
					}
				]
			}
		},
		"/security_events/{index}/{id}": {
			"post": {
				"operationId": "updateSecurityEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Performs the following tasks for an event:\n* Add or delete custom Tags\n* Update the Status or Comments fields",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The index to be queried",
						"in": "path",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The ID of the event to change",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SecurityEventRequest"
							}
						}
					}
				}
			}
		},
		"/security_events/{index}/{id}/tags": {
			"patch": {
				"operationId": "addTagsToSecurityEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Adds custom Tags.",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The index to be queried",
						"in": "path",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The ID of the event to change",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateAddTagsRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteTagsFromSecurityEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Deletes custom Tags.",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The index to be queried",
						"in": "path",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The ID of the event to change",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateDeleteTagsRequest"
							}
						}
					}
				}
			}
		},
		"/security_events/{index}/{id}/status": {
			"put": {
				"operationId": "updateStatusOfSecurityEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Updates the Status fields",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The index to be queried",
						"in": "path",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The ID of the event to change",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateStatusRequest"
							}
						}
					}
				}
			}
		},
		"/security_events/{index}/{id}/comments": {
			"put": {
				"operationId": "updateCommentsOfSecurityEvent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Updates the Comments fields",
				"tags": [
					"Security Event"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The index to be queried",
						"in": "path",
						"name": "index",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The ID of the event to change",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCommentsRequest"
							}
						}
					}
				}
			}
		},
		"/security_event_filters": {
			"get": {
				"operationId": "listSecurityEventFilters",
				"responses": {
					"200": {
						"description": "list of security event filters.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventFiltersResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": [
												{
													"_id": "642fb91a29e3a2de08f9cd2d",
													"created_at": 1680849178,
													"created_by": "my_account@abc.com",
													"cust_id": "05f16b73b9984c5c806e2cca2ce3381c",
													"name": "jack-test-create-filter",
													"type": "alert filter",
													"conditions": {
														"modifier": "or",
														"conditions": [
															{
																"modifier": "or",
																"conditions": [
																	{
																		"field": "advanced",
																		"type": "number",
																		"op": "==",
																		"value": [
																			1
																		]
																	}
																]
															}
														]
													},
													"data": {
														"notes": "note1",
														"notes_by": "my_account@abc.com"
													},
													"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
													"tenants": [
														"05f16b73b9984c5c806e2cca2ce3381c"
													],
													"tenant_grps": []
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of security event filters.\nsecurity event filters are filtered by customer id as requested.",
				"tags": [
					"Security Event Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Tenant ID to filter the security event filters.",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			},
			"post": {
				"operationId": "createSecurityEventFilter",
				"responses": {
					"200": {
						"description": "created security event filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "642fb91a29e3a2de08f9cd2d",
												"created_at": 1680849178,
												"created_by": "my_account@abc.com",
												"cust_id": "05f16b73b9984c5c806e2cca2ce3381c",
												"name": "jack-test-create-filter",
												"type": "alert filter",
												"conditions": {
													"modifier": "or",
													"conditions": [
														{
															"modifier": "or",
															"conditions": [
																{
																	"field": "advanced",
																	"type": "number",
																	"op": "==",
																	"value": [
																		1
																	]
																}
															]
														}
													]
												},
												"data": {
													"notes": "note1",
													"notes_by": "my_account@abc.com"
												},
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"tenants": [
													"05f16b73b9984c5c806e2cca2ce3381c"
												],
												"tenant_grps": []
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a security event filter.",
				"tags": [
					"Security Event Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "security event filter data to be created",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SecurityEventFilterFormData",
								"description": "security event filter data to be created"
							}
						}
					}
				}
			}
		},
		"/security_event_filters/{id}": {
			"put": {
				"operationId": "PatchSecurityEventFilter",
				"responses": {
					"200": {
						"description": "updated security event filter.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecurityEventFilterResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": {
												"_id": "642fb91a29e3a2de08f9cd2d",
												"created_at": 1680849178,
												"created_by": "my_account@abc.com",
												"cust_id": "05f16b73b9984c5c806e2cca2ce3381c",
												"name": "jack-test-create-filter",
												"type": "alert filter",
												"conditions": {
													"modifier": "or",
													"conditions": [
														{
															"modifier": "or",
															"conditions": [
																{
																	"field": "advanced",
																	"type": "number",
																	"op": "==",
																	"value": [
																		1
																	]
																}
															]
														}
													]
												},
												"data": {
													"notes": "note1",
													"notes_by": "my_account@abc.com"
												},
												"org_id": "0c5b67d2e9e54398be1e4d1cff1edc3d",
												"tenants": [
													"05f16b73b9984c5c806e2cca2ce3381c"
												],
												"tenant_grps": []
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Patch an existing security event filter.",
				"tags": [
					"Security Event Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "security event filter _id to be updated",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "642fb91a29e3a2de08f9cd2d"
					}
				],
				"requestBody": {
					"description": "security event filter data to be updated",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SecurityEventFilterFormData",
								"description": "security event filter data to be updated"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteSecurityEventFilter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"data": "OK"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete an existing security event filter.",
				"tags": [
					"Security Event Filter"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "security event filter _id to be deleted",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "642fb91a29e3a2de08f9cd2d"
					}
				]
			}
		},
		"/sensor-images": {
			"get": {
				"operationId": "getSensorImagesInfo",
				"responses": {
					"200": {
						"description": "Sensor image info",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SensorImagesInfoResponse"
								}
							}
						}
					}
				},
				"description": "Retrieve all sensor image info.\nThis API is designed for SaaS only; it returns a 404 error for on-premise.",
				"tags": [
					"Sensor Image"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/sensor-images/download/{version}/{image}": {
			"get": {
				"operationId": "downloadSensorImage",
				"responses": {
					"200": {
						"description": "Sensor image file",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string",
											"format": "byte"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Download selected sensor image.\nThis API is designed for SaaS only; it returns a 404 error for on-premise.",
				"tags": [
					"Sensor Image"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Image version. e.g. 5.2.0",
						"in": "path",
						"name": "version",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Package name (file name)",
						"in": "path",
						"name": "image",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/storage-usages": {
			"get": {
				"operationId": "listStorageUsages",
				"responses": {
					"200": {
						"description": "list of Usages.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageUsagesResponse"
								},
								"examples": {
									"agg_type=tenant": {
										"value": {
											"data": [
												{
													"timestamp": 1695427200000,
													"time": "2023-09-23T00:00:00.000Z",
													"total_usage": 0.002705614535505814,
													"usages": [
														{
															"tenant_name": "tenant1",
															"usage": 0,
															"percentage": 0
														},
														{
															"tenant_name": "tenant2",
															"usage": 0.002705614535505814,
															"percentage": 100
														}
													]
												},
												{
													"timestamp": 1695513600000,
													"time": "2023-09-24T00:00:00.000Z",
													"total_usage": 4.232705614535506,
													"usages": [
														{
															"tenant_name": "tenant1",
															"usage": 1.23,
															"percentage": 29.04
														},
														{
															"tenant_name": "tenant2",
															"usage": 3.0027056145355058,
															"percentage": 70.96
														}
													]
												}
											]
										}
									},
									"agg_type=tenant_index": {
										"value": {
											"data": [
												{
													"timestamp": 1695427200000,
													"time": "2023-09-23T00:00:00.000Z",
													"total_usage": 0.002705614535505814,
													"usages": [
														{
															"tenant_name": "tenant1",
															"index": "AWS Events",
															"usage": 0,
															"percentage": 0
														},
														{
															"tenant_name": "tenant1",
															"index": "Alerts",
															"usage": 0,
															"percentage": 0
														},
														{
															"tenant_name": "tenant2",
															"index": "Alerts",
															"usage": 0.002705614535505814,
															"percentage": 100
														}
													]
												},
												{
													"timestamp": 1695513600000,
													"time": "2023-09-24T00:00:00.000Z",
													"total_usage": 4.232705614535506,
													"usages": [
														{
															"tenant_name": "tenant1",
															"index": "AWS Events",
															"usage": 1.23,
															"percentage": 16.24
														},
														{
															"tenant_name": "tenant1",
															"index": "Alerts",
															"usage": 3.34,
															"percentage": 44.13
														},
														{
															"tenant_name": "tenant2",
															"index": "Alerts",
															"usage": 3.0027056145355058,
															"percentage": 39.63
														}
													]
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves the list of storage usages aggregated by tenant or tenant and index.\nStorage usages are filtered by customer id as requested.",
				"tags": [
					"Storage Usage"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "aggregation type. Possible values: tenant, tenant_index.",
						"in": "query",
						"name": "aggr_type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StorageUsageAggregationQuery"
						}
					},
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "529077457672470ea803a2f8feb52944"
					}
				]
			}
		},
		"/tenants/{id}/delete_check": {
			"get": {
				"operationId": "deleteCheckTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the result of the delete check.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/TenantPurgeCheckResponse"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Checks if a tenant can be deleted.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tenants/{id}": {
			"delete": {
				"operationId": "delete",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the result of the delete operation.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"type": "string"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a tenant.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "getTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the tenant data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Tenant"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves an existing tenant by ID.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "updateTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the updated tenant data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Tenant"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Updates an existing tenant.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body containing the updated tenant data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TenantRequest",
								"description": "The request body containing the updated tenant data."
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "modifyTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the modified tenant data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Tenant"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Modifies an existing tenant.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body containing the modified tenant data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TenantRequest",
								"description": "The request body containing the modified tenant data."
							}
						}
					}
				}
			}
		},
		"/tenants": {
			"get": {
				"operationId": "listTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the list of existing tenants.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/Tenant"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of existing tenants.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "createTenant",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the created tenant data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/Tenant"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Creates a new tenant.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the tenant data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TenantRequest",
								"description": "The request body containing the tenant data."
							}
						}
					}
				}
			}
		},
		"/tenants/{cust_id}/logo": {
			"get": {
				"operationId": "getTenantLogo",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the tenant logo data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/GetTenantLogoResponse"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the logo of a tenant.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the customer.",
						"in": "path",
						"name": "cust_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tenant_groups": {
			"get": {
				"operationId": "listTenantGroup",
				"responses": {
					"200": {
						"description": "list of existing tenant_groups.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"$ref": "#/components/schemas/TenantGroup"
											},
											"type": "array"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of existing tenant_groups.",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "createTenantGroup",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the created tenant group.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/TenantGroup"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Creates a new tenant group.",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The request body containing the data for creating the tenant group.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantGroupRequest",
								"description": "- The request body containing the data for creating the tenant group."
							}
						}
					}
				}
			}
		},
		"/tenant_groups/{id}": {
			"get": {
				"operationId": "getTenantGroup",
				"responses": {
					"200": {
						"description": "The tenant_group data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/TenantGroup"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the existing tenant specified by the id.",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The id of the tenant_group.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "updateTenantGroup",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the updated tenant group.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/TenantGroup"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Updates an existing tenant group specified by the id",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the tenant group to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The request body containing the data to update the tenant group with.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTenantGroupRequest",
								"description": "- The request body containing the data to update the tenant group with."
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "modifyTenantGroup",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the modified tenant group data.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/TenantGroup"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Modifies a tenant group.",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the tenant group to modify.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- The updated data for the tenant group.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTenantGroupRequest",
								"description": "- The updated data for the tenant group."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteTenantGroup",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the number of deleted tenant groups.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"n": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"n"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a tenant group specified by the id.",
				"tags": [
					"Tenant Group"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the tenant group to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tenant_groups/{id}/logo": {
			"get": {
				"operationId": "getTenantGroupLogo",
				"responses": {
					"200": {
						"description": "A promise that resolves to an object containing the logo data of the tenant group.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"$ref": "#/components/schemas/GetTenantGroupLogoResponse"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the logo of a tenant group specified by the id.",
				"tags": [
					"Tenant Group"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "- The ID of the tenant group.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/update_ser": {
			"post": {
				"operationId": "update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateSerResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Performs the following tasks for an event:\n* Add or delete custom Tags\n* Update the Status or Comments fields",
				"tags": [
					"Security Event"
				],
				"deprecated": true,
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Using update_ser to Add or Delete Custom Tags for Events\nYou can use the update_ser API to add or delete custom tags for events. As summarized in the table below, your call must have the following:\n* The header and the /connect/api/update_ser path.\n* The index and ID of the event.\n* The op field set to either add or delete, depending on the type of operation you are performing.\n* The tag to be added or deleted in the tag field.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateSerRequest",
								"description": "Using update_ser to Add or Delete Custom Tags for Events\nYou can use the update_ser API to add or delete custom tags for events. As summarized in the table below, your call must have the following:\n* The header and the /connect/api/update_ser path.\n* The index and ID of the event.\n* The op field set to either add or delete, depending on the type of operation you are performing.\n* The tag to be added or deleted in the tag field."
							}
						}
					}
				}
			}
		},
		"/user_activities": {
			"get": {
				"operationId": "listActivities",
				"responses": {
					"200": {
						"description": "list of avaiable user_activity:",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "The responder function for a error response",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"fields": {},
										"error": {
											"type": "string"
										}
									},
									"required": [
										"fields",
										"error"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of user activity logs.",
				"tags": [
					"User Activity"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to skip the specified number of matching records before returning results. This argument is most useful when used together\nwith the limit, sort and order arguments, allowing you to, for example, query for the second 100 activities:\n http://<Stellar Cyber_IP>/connect/api/v1/user_activities?sort=Timestamps&order=desc&skip=100",
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to limit the number of results returned by your query to the specified integer value. This argument is particularly useful when\nused together with the sort and order arguments, allowing you to, for example, query for activities:\n http://<Stellar Cyber_IP>/connect/api/v1/user_activities?limit=10&sort=Timestamps&order=desc",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Use this argument to sort the activities returned by your query according to the specified field. <br>\nDefault: Timestamps",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use this argument to specify whether the sort specified as part of your query is applied in either ascending (asc) or descending (desc) order.\nFor example, the following query returns the five latest activities.\n http://<Stellar Cyber_IP>/connect/api/v1/user_activities?limit=5&sort=Timestamps&order=desc",
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for activities",
						"in": "query",
						"name": "Activity",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for data",
						"in": "query",
						"name": "Data",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for IP addresses",
						"in": "query",
						"name": "IPAddress",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for modules",
						"in": "query",
						"name": "Module",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for Email",
						"in": "query",
						"name": "Email",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Used to search for timestamps",
						"in": "query",
						"name": "Timestamps",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "FROM~Timestamps",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "TO~Timestamps",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users": {
			"get": {
				"operationId": "listUser",
				"responses": {
					"200": {
						"description": "list of existing users:",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the list of existing users.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "cust_id is used for filter the list",
						"in": "query",
						"name": "cust_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "createUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Create a new user",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserForCreateRequest"
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "getUser",
				"responses": {
					"200": {
						"description": "user data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					}
				},
				"description": "Retrieves the existing user specified by the id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "id of the user",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "updateUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Replace user info specified by the id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserForUpdateRequest"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "patchUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable Entity"
					}
				},
				"description": "Modify user info specified by the id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserForPatchRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "deleteUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"n": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"n"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Delete user specified by the id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:3000/connect/api/v1"
		}
	]
}